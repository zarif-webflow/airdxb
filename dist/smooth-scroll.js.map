{
  "version": 3,
  "sources": ["../node_modules/.pnpm/@zag-js+dom-query@1.24.0/node_modules/@zag-js/dom-query/dist/index.mjs", "../node_modules/.pnpm/@zag-js+remove-scroll@1.24.0/node_modules/@zag-js/remove-scroll/dist/index.mjs", "../node_modules/.pnpm/lenis@1.1.3/node_modules/lenis/src/maths.js", "../node_modules/.pnpm/lenis@1.1.3/node_modules/lenis/src/animate.js", "../node_modules/.pnpm/lenis@1.1.3/node_modules/lenis/src/dimensions.js", "../node_modules/.pnpm/lenis@1.1.3/node_modules/lenis/src/debounce.js", "../node_modules/.pnpm/lenis@1.1.3/node_modules/lenis/src/emitter.js", "../node_modules/.pnpm/lenis@1.1.3/node_modules/lenis/src/virtual-scroll.js", "../node_modules/.pnpm/lenis@1.1.3/node_modules/lenis/src/index.ts", "../src/features/smooth-scroll.ts"],
  "sourcesContent": ["// src/caret.ts\nfunction isCaretAtStart(input) {\n  if (!input) return false;\n  try {\n    return input.selectionStart === 0 && input.selectionEnd === 0;\n  } catch {\n    return input.value === \"\";\n  }\n}\nfunction setCaretToEnd(input) {\n  if (!input) return;\n  const start = input.selectionStart ?? 0;\n  const end = input.selectionEnd ?? 0;\n  if (Math.abs(end - start) !== 0) return;\n  if (start !== 0) return;\n  input.setSelectionRange(input.value.length, input.value.length);\n}\n\n// src/shared.ts\nvar clamp = (value) => Math.max(0, Math.min(1, value));\nvar wrap = (v, idx) => {\n  return v.map((_, index) => v[(Math.max(idx, 0) + index) % v.length]);\n};\nvar pipe = (...fns) => (arg) => fns.reduce((acc, fn) => fn(acc), arg);\nvar noop = () => void 0;\nvar isObject = (v) => typeof v === \"object\" && v !== null;\nvar MAX_Z_INDEX = 2147483647;\nvar dataAttr = (guard) => guard ? \"\" : void 0;\nvar ariaAttr = (guard) => guard ? \"true\" : void 0;\n\n// src/node.ts\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_NODE = 9;\nvar DOCUMENT_FRAGMENT_NODE = 11;\nvar isHTMLElement = (el) => isObject(el) && el.nodeType === ELEMENT_NODE && typeof el.nodeName === \"string\";\nvar isDocument = (el) => isObject(el) && el.nodeType === DOCUMENT_NODE;\nvar isWindow = (el) => isObject(el) && el === el.window;\nvar isVisualViewport = (el) => isObject(el) && el.constructor.name === \"VisualViewport\";\nvar getNodeName = (node) => {\n  if (isHTMLElement(node)) return node.localName || \"\";\n  return \"#document\";\n};\nfunction isRootElement(node) {\n  return [\"html\", \"body\", \"#document\"].includes(getNodeName(node));\n}\nvar isNode = (el) => isObject(el) && el.nodeType !== void 0;\nvar isShadowRoot = (el) => isNode(el) && el.nodeType === DOCUMENT_FRAGMENT_NODE && \"host\" in el;\nvar isInputElement = (el) => isHTMLElement(el) && el.localName === \"input\";\nvar isAnchorElement = (el) => !!el?.matches(\"a[href]\");\nvar isElementVisible = (el) => {\n  if (!isHTMLElement(el)) return false;\n  return el.offsetWidth > 0 || el.offsetHeight > 0 || el.getClientRects().length > 0;\n};\nfunction isActiveElement(element) {\n  if (!element) return false;\n  const rootNode = element.getRootNode();\n  return getActiveElement(rootNode) === element;\n}\nvar TEXTAREA_SELECT_REGEX = /(textarea|select)/;\nfunction isEditableElement(el) {\n  if (el == null || !isHTMLElement(el)) return false;\n  try {\n    return isInputElement(el) && el.selectionStart != null || TEXTAREA_SELECT_REGEX.test(el.localName) || el.isContentEditable || el.getAttribute(\"contenteditable\") === \"true\" || el.getAttribute(\"contenteditable\") === \"\";\n  } catch {\n    return false;\n  }\n}\nfunction contains(parent, child) {\n  if (!parent || !child) return false;\n  if (!isHTMLElement(parent) || !isHTMLElement(child)) return false;\n  const rootNode = child.getRootNode?.();\n  if (parent === child) return true;\n  if (parent.contains(child)) return true;\n  if (rootNode && isShadowRoot(rootNode)) {\n    let next = child;\n    while (next) {\n      if (parent === next) return true;\n      next = next.parentNode || next.host;\n    }\n  }\n  return false;\n}\nfunction getDocument(el) {\n  if (isDocument(el)) return el;\n  if (isWindow(el)) return el.document;\n  return el?.ownerDocument ?? document;\n}\nfunction getDocumentElement(el) {\n  return getDocument(el).documentElement;\n}\nfunction getWindow(el) {\n  if (isShadowRoot(el)) return getWindow(el.host);\n  if (isDocument(el)) return el.defaultView ?? window;\n  if (isHTMLElement(el)) return el.ownerDocument?.defaultView ?? window;\n  return window;\n}\nfunction getActiveElement(rootNode) {\n  let activeElement = rootNode.activeElement;\n  while (activeElement?.shadowRoot) {\n    const el = activeElement.shadowRoot.activeElement;\n    if (!el || el === activeElement) break;\n    else activeElement = el;\n  }\n  return activeElement;\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === \"html\") return node;\n  const result = node.assignedSlot || node.parentNode || isShadowRoot(node) && node.host || getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\n\n// src/computed-style.ts\nvar styleCache = /* @__PURE__ */ new WeakMap();\nfunction getComputedStyle(el) {\n  if (!styleCache.has(el)) {\n    styleCache.set(el, getWindow(el).getComputedStyle(el));\n  }\n  return styleCache.get(el);\n}\n\n// src/data-url.ts\nfunction getDataUrl(svg, opts) {\n  const { type, quality = 0.92, background } = opts;\n  if (!svg) throw new Error(\"[zag-js > getDataUrl]: Could not find the svg element\");\n  const win = getWindow(svg);\n  const doc = win.document;\n  const svgBounds = svg.getBoundingClientRect();\n  const svgClone = svg.cloneNode(true);\n  if (!svgClone.hasAttribute(\"viewBox\")) {\n    svgClone.setAttribute(\"viewBox\", `0 0 ${svgBounds.width} ${svgBounds.height}`);\n  }\n  const serializer = new win.XMLSerializer();\n  const source = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n' + serializer.serializeToString(svgClone);\n  const svgString = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(source);\n  if (type === \"image/svg+xml\") {\n    return Promise.resolve(svgString).then((str) => {\n      svgClone.remove();\n      return str;\n    });\n  }\n  const dpr = win.devicePixelRatio || 1;\n  const canvas = doc.createElement(\"canvas\");\n  const image = new win.Image();\n  image.src = svgString;\n  canvas.width = svgBounds.width * dpr;\n  canvas.height = svgBounds.height * dpr;\n  const context = canvas.getContext(\"2d\");\n  if (type === \"image/jpeg\" || background) {\n    context.fillStyle = background || \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  }\n  return new Promise((resolve) => {\n    image.onload = () => {\n      context?.drawImage(image, 0, 0, canvas.width, canvas.height);\n      resolve(canvas.toDataURL(type, quality));\n      svgClone.remove();\n    };\n  });\n}\n\n// src/platform.ts\nvar isDom = () => typeof document !== \"undefined\";\nfunction getPlatform() {\n  const agent = navigator.userAgentData;\n  return agent?.platform ?? navigator.platform;\n}\nfunction getUserAgent() {\n  const ua2 = navigator.userAgentData;\n  if (ua2 && Array.isArray(ua2.brands)) {\n    return ua2.brands.map(({ brand, version }) => `${brand}/${version}`).join(\" \");\n  }\n  return navigator.userAgent;\n}\nvar pt = (v) => isDom() && v.test(getPlatform());\nvar ua = (v) => isDom() && v.test(getUserAgent());\nvar vn = (v) => isDom() && v.test(navigator.vendor);\nvar isTouchDevice = () => isDom() && !!navigator.maxTouchPoints;\nvar isIPhone = () => pt(/^iPhone/i);\nvar isIPad = () => pt(/^iPad/i) || isMac() && navigator.maxTouchPoints > 1;\nvar isIos = () => isIPhone() || isIPad();\nvar isApple = () => isMac() || isIos();\nvar isMac = () => pt(/^Mac/i);\nvar isSafari = () => isApple() && vn(/apple/i);\nvar isFirefox = () => ua(/Firefox/i);\nvar isChrome = () => ua(/Chrome/i);\nvar isWebKit = () => ua(/AppleWebKit/i) && !isChrome();\nvar isAndroid = () => ua(/Android/i);\n\n// src/event.ts\nfunction getBeforeInputValue(event) {\n  const { selectionStart, selectionEnd, value } = event.currentTarget;\n  return value.slice(0, selectionStart) + event.data + value.slice(selectionEnd);\n}\nfunction getComposedPath(event) {\n  return event.composedPath?.() ?? event.nativeEvent?.composedPath?.();\n}\nfunction getEventTarget(event) {\n  const composedPath = getComposedPath(event);\n  return composedPath?.[0] ?? event.target;\n}\nfunction isOpeningInNewTab(event) {\n  const element = event.currentTarget;\n  if (!element) return false;\n  const validElement = element.matches(\"a[href], button[type='submit'], input[type='submit']\");\n  if (!validElement) return false;\n  const isMiddleClick = event.button === 1;\n  const isModKeyClick = isCtrlOrMetaKey(event);\n  return isMiddleClick || isModKeyClick;\n}\nfunction isDownloadingEvent(event) {\n  const element = event.currentTarget;\n  if (!element) return false;\n  const localName = element.localName;\n  if (!event.altKey) return false;\n  if (localName === \"a\") return true;\n  if (localName === \"button\" && element.type === \"submit\") return true;\n  if (localName === \"input\" && element.type === \"submit\") return true;\n  return false;\n}\nfunction isComposingEvent(event) {\n  return getNativeEvent(event).isComposing || event.keyCode === 229;\n}\nfunction isKeyboardClick(e) {\n  return e.detail === 0 || e.clientX === 0 && e.clientY === 0;\n}\nfunction isCtrlOrMetaKey(e) {\n  if (isMac()) return e.metaKey;\n  return e.ctrlKey;\n}\nfunction isPrintableKey(e) {\n  return e.key.length === 1 && !e.ctrlKey && !e.metaKey;\n}\nfunction isVirtualPointerEvent(e) {\n  return e.width === 0 && e.height === 0 || e.width === 1 && e.height === 1 && e.pressure === 0 && e.detail === 0 && e.pointerType === \"mouse\";\n}\nfunction isVirtualClick(e) {\n  if (e.pointerType === \"\" && e.isTrusted) return true;\n  if (isAndroid() && e.pointerType) {\n    return e.type === \"click\" && e.buttons === 1;\n  }\n  return e.detail === 0 && !e.pointerType;\n}\nvar isLeftClick = (e) => e.button === 0;\nvar isContextMenuEvent = (e) => {\n  return e.button === 2 || isMac() && e.ctrlKey && e.button === 0;\n};\nvar isModifierKey = (e) => e.ctrlKey || e.altKey || e.metaKey;\nvar isTouchEvent = (event) => \"touches\" in event && event.touches.length > 0;\nvar keyMap = {\n  Up: \"ArrowUp\",\n  Down: \"ArrowDown\",\n  Esc: \"Escape\",\n  \" \": \"Space\",\n  \",\": \"Comma\",\n  Left: \"ArrowLeft\",\n  Right: \"ArrowRight\"\n};\nvar rtlKeyMap = {\n  ArrowLeft: \"ArrowRight\",\n  ArrowRight: \"ArrowLeft\"\n};\nfunction getEventKey(event, options = {}) {\n  const { dir = \"ltr\", orientation = \"horizontal\" } = options;\n  let key = event.key;\n  key = keyMap[key] ?? key;\n  const isRtl = dir === \"rtl\" && orientation === \"horizontal\";\n  if (isRtl && key in rtlKeyMap) key = rtlKeyMap[key];\n  return key;\n}\nfunction getNativeEvent(event) {\n  return event.nativeEvent ?? event;\n}\nvar pageKeys = /* @__PURE__ */ new Set([\"PageUp\", \"PageDown\"]);\nvar arrowKeys = /* @__PURE__ */ new Set([\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"]);\nfunction getEventStep(event) {\n  if (event.ctrlKey || event.metaKey) {\n    return 0.1;\n  } else {\n    const isPageKey = pageKeys.has(event.key);\n    const isSkipKey = isPageKey || event.shiftKey && arrowKeys.has(event.key);\n    return isSkipKey ? 10 : 1;\n  }\n}\nfunction getEventPoint(event, type = \"client\") {\n  const point = isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;\n  return { x: point[`${type}X`], y: point[`${type}Y`] };\n}\nvar addDomEvent = (target, eventName, handler, options) => {\n  const node = typeof target === \"function\" ? target() : target;\n  node?.addEventListener(eventName, handler, options);\n  return () => {\n    node?.removeEventListener(eventName, handler, options);\n  };\n};\n\n// src/form.ts\nfunction getDescriptor(el, options) {\n  const { type = \"HTMLInputElement\", property = \"value\" } = options;\n  const proto = getWindow(el)[type].prototype;\n  return Object.getOwnPropertyDescriptor(proto, property) ?? {};\n}\nfunction getElementType(el) {\n  if (el.localName === \"input\") return \"HTMLInputElement\";\n  if (el.localName === \"textarea\") return \"HTMLTextAreaElement\";\n  if (el.localName === \"select\") return \"HTMLSelectElement\";\n}\nfunction setElementValue(el, value, property = \"value\") {\n  if (!el) return;\n  const type = getElementType(el);\n  if (type) {\n    const descriptor = getDescriptor(el, { type, property });\n    descriptor.set?.call(el, value);\n  }\n  el.setAttribute(property, value);\n}\nfunction setElementChecked(el, checked) {\n  if (!el) return;\n  const descriptor = getDescriptor(el, { type: \"HTMLInputElement\", property: \"checked\" });\n  descriptor.set?.call(el, checked);\n  if (checked) el.setAttribute(\"checked\", \"\");\n  else el.removeAttribute(\"checked\");\n}\nfunction dispatchInputValueEvent(el, options) {\n  const { value, bubbles = true } = options;\n  if (!el) return;\n  const win = getWindow(el);\n  if (!(el instanceof win.HTMLInputElement)) return;\n  setElementValue(el, `${value}`);\n  el.dispatchEvent(new win.Event(\"input\", { bubbles }));\n}\nfunction dispatchInputCheckedEvent(el, options) {\n  const { checked, bubbles = true } = options;\n  if (!el) return;\n  const win = getWindow(el);\n  if (!(el instanceof win.HTMLInputElement)) return;\n  setElementChecked(el, checked);\n  el.dispatchEvent(new win.Event(\"click\", { bubbles }));\n}\nfunction getClosestForm(el) {\n  return isFormElement(el) ? el.form : el.closest(\"form\");\n}\nfunction isFormElement(el) {\n  return el.matches(\"textarea, input, select, button\");\n}\nfunction trackFormReset(el, callback) {\n  if (!el) return;\n  const form = getClosestForm(el);\n  const onReset = (e) => {\n    if (e.defaultPrevented) return;\n    callback();\n  };\n  form?.addEventListener(\"reset\", onReset, { passive: true });\n  return () => form?.removeEventListener(\"reset\", onReset);\n}\nfunction trackFieldsetDisabled(el, callback) {\n  const fieldset = el?.closest(\"fieldset\");\n  if (!fieldset) return;\n  callback(fieldset.disabled);\n  const win = getWindow(fieldset);\n  const obs = new win.MutationObserver(() => callback(fieldset.disabled));\n  obs.observe(fieldset, {\n    attributes: true,\n    attributeFilter: [\"disabled\"]\n  });\n  return () => obs.disconnect();\n}\nfunction trackFormControl(el, options) {\n  if (!el) return;\n  const { onFieldsetDisabledChange, onFormReset } = options;\n  const cleanups = [trackFormReset(el, onFormReset), trackFieldsetDisabled(el, onFieldsetDisabledChange)];\n  return () => cleanups.forEach((cleanup) => cleanup?.());\n}\n\n// src/tabbable.ts\nvar isFrame = (el) => isHTMLElement(el) && el.tagName === \"IFRAME\";\nvar hasTabIndex = (el) => !Number.isNaN(parseInt(el.getAttribute(\"tabindex\") || \"0\", 10));\nvar hasNegativeTabIndex = (el) => parseInt(el.getAttribute(\"tabindex\") || \"0\", 10) < 0;\nvar focusableSelector = \"input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], iframe, object, embed, area[href], audio[controls], video[controls], [contenteditable]:not([contenteditable='false']), details > summary:first-of-type\";\nvar getFocusables = (container, includeContainer = false) => {\n  if (!container) return [];\n  const elements = Array.from(container.querySelectorAll(focusableSelector));\n  const include = includeContainer == true || includeContainer == \"if-empty\" && elements.length === 0;\n  if (include && isHTMLElement(container) && isFocusable(container)) {\n    elements.unshift(container);\n  }\n  const focusableElements = elements.filter(isFocusable);\n  focusableElements.forEach((element, i) => {\n    if (isFrame(element) && element.contentDocument) {\n      const frameBody = element.contentDocument.body;\n      focusableElements.splice(i, 1, ...getFocusables(frameBody));\n    }\n  });\n  return focusableElements;\n};\nfunction isFocusable(element) {\n  if (!element || element.closest(\"[inert]\")) return false;\n  return element.matches(focusableSelector) && isElementVisible(element);\n}\nfunction getFirstFocusable(container, includeContainer) {\n  const [first] = getFocusables(container, includeContainer);\n  return first || null;\n}\nfunction getTabbables(container, includeContainer) {\n  if (!container) return [];\n  const elements = Array.from(container.querySelectorAll(focusableSelector));\n  const tabbableElements = elements.filter(isTabbable);\n  if (includeContainer && isTabbable(container)) {\n    tabbableElements.unshift(container);\n  }\n  tabbableElements.forEach((element, i) => {\n    if (isFrame(element) && element.contentDocument) {\n      const frameBody = element.contentDocument.body;\n      const allFrameTabbable = getTabbables(frameBody);\n      tabbableElements.splice(i, 1, ...allFrameTabbable);\n    }\n  });\n  if (!tabbableElements.length && includeContainer) {\n    return elements;\n  }\n  return tabbableElements;\n}\nfunction isTabbable(el) {\n  if (el != null && el.tabIndex > 0) return true;\n  return isFocusable(el) && !hasNegativeTabIndex(el);\n}\nfunction getFirstTabbable(container, includeContainer) {\n  const [first] = getTabbables(container, includeContainer);\n  return first || null;\n}\nfunction getLastTabbable(container, includeContainer) {\n  const elements = getTabbables(container, includeContainer);\n  return elements[elements.length - 1] || null;\n}\nfunction getTabbableEdges(container, includeContainer) {\n  const elements = getTabbables(container, includeContainer);\n  const first = elements[0] || null;\n  const last = elements[elements.length - 1] || null;\n  return [first, last];\n}\nfunction getNextTabbable(container, current) {\n  const tabbables = getTabbables(container);\n  const doc = container?.ownerDocument || document;\n  const currentElement = current ?? getActiveElement(doc);\n  if (!currentElement) return null;\n  const index = tabbables.indexOf(currentElement);\n  return tabbables[index + 1] || null;\n}\nfunction getTabIndex(node) {\n  if (node.tabIndex < 0) {\n    if ((/^(audio|video|details)$/.test(node.localName) || isEditableElement(node)) && !hasTabIndex(node)) {\n      return 0;\n    }\n  }\n  return node.tabIndex;\n}\n\n// src/initial-focus.ts\nfunction getInitialFocus(options) {\n  const { root, getInitialEl, filter, enabled = true } = options;\n  if (!enabled) return;\n  let node = null;\n  node || (node = typeof getInitialEl === \"function\" ? getInitialEl() : getInitialEl);\n  node || (node = root?.querySelector(\"[data-autofocus],[autofocus]\"));\n  if (!node) {\n    const tabbables = getTabbables(root);\n    node = filter ? tabbables.filter(filter)[0] : tabbables[0];\n  }\n  return node || root || void 0;\n}\nfunction isValidTabEvent(event) {\n  const container = event.currentTarget;\n  if (!container) return false;\n  const [firstTabbable, lastTabbable] = getTabbableEdges(container);\n  if (isActiveElement(firstTabbable) && event.shiftKey) return false;\n  if (isActiveElement(lastTabbable) && !event.shiftKey) return false;\n  if (!firstTabbable && !lastTabbable) return false;\n  return true;\n}\n\n// src/raf.ts\nfunction nextTick(fn) {\n  const set = /* @__PURE__ */ new Set();\n  function raf2(fn2) {\n    const id = globalThis.requestAnimationFrame(fn2);\n    set.add(() => globalThis.cancelAnimationFrame(id));\n  }\n  raf2(() => raf2(fn));\n  return function cleanup() {\n    set.forEach((fn2) => fn2());\n  };\n}\nfunction raf(fn) {\n  let cleanup;\n  const id = globalThis.requestAnimationFrame(() => {\n    cleanup = fn();\n  });\n  return () => {\n    globalThis.cancelAnimationFrame(id);\n    cleanup?.();\n  };\n}\nfunction queueBeforeEvent(el, type, cb) {\n  const cancelTimer = raf(() => {\n    el.removeEventListener(type, exec, true);\n    cb();\n  });\n  const exec = () => {\n    cancelTimer();\n    cb();\n  };\n  el.addEventListener(type, exec, { once: true, capture: true });\n  return cancelTimer;\n}\n\n// src/mutation-observer.ts\nfunction observeAttributesImpl(node, options) {\n  if (!node) return;\n  const { attributes, callback: fn } = options;\n  const win = node.ownerDocument.defaultView || window;\n  const obs = new win.MutationObserver((changes) => {\n    for (const change of changes) {\n      if (change.type === \"attributes\" && change.attributeName && attributes.includes(change.attributeName)) {\n        fn(change);\n      }\n    }\n  });\n  obs.observe(node, { attributes: true, attributeFilter: attributes });\n  return () => obs.disconnect();\n}\nfunction observeAttributes(nodeOrFn, options) {\n  const { defer } = options;\n  const func = defer ? raf : (v) => v();\n  const cleanups = [];\n  cleanups.push(\n    func(() => {\n      const node = typeof nodeOrFn === \"function\" ? nodeOrFn() : nodeOrFn;\n      cleanups.push(observeAttributesImpl(node, options));\n    })\n  );\n  return () => {\n    cleanups.forEach((fn) => fn?.());\n  };\n}\nfunction observeChildrenImpl(node, options) {\n  const { callback: fn } = options;\n  if (!node) return;\n  const win = node.ownerDocument.defaultView || window;\n  const obs = new win.MutationObserver(fn);\n  obs.observe(node, { childList: true, subtree: true });\n  return () => obs.disconnect();\n}\nfunction observeChildren(nodeOrFn, options) {\n  const { defer } = options;\n  const func = defer ? raf : (v) => v();\n  const cleanups = [];\n  cleanups.push(\n    func(() => {\n      const node = typeof nodeOrFn === \"function\" ? nodeOrFn() : nodeOrFn;\n      cleanups.push(observeChildrenImpl(node, options));\n    })\n  );\n  return () => {\n    cleanups.forEach((fn) => fn?.());\n  };\n}\n\n// src/navigate.ts\nfunction clickIfLink(el) {\n  const click = () => {\n    const win = getWindow(el);\n    el.dispatchEvent(new win.MouseEvent(\"click\"));\n  };\n  if (isFirefox()) {\n    queueBeforeEvent(el, \"keyup\", click);\n  } else {\n    queueMicrotask(click);\n  }\n}\n\n// src/overflow.ts\nfunction getNearestOverflowAncestor(el) {\n  const parentNode = getParentNode(el);\n  if (isRootElement(parentNode)) return getDocument(parentNode).body;\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) return parentNode;\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(el, list = []) {\n  const scrollableAncestor = getNearestOverflowAncestor(el);\n  const isBody = scrollableAncestor === el.ownerDocument.body;\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, []));\n}\nvar getElementRect = (el) => {\n  if (isHTMLElement(el)) return el.getBoundingClientRect();\n  if (isVisualViewport(el)) return { top: 0, left: 0, bottom: el.height, right: el.width };\n  return { top: 0, left: 0, bottom: el.innerHeight, right: el.innerWidth };\n};\nfunction isInView(el, ancestor) {\n  if (!isHTMLElement(el)) return true;\n  const ancestorRect = getElementRect(ancestor);\n  const elRect = el.getBoundingClientRect();\n  return elRect.top >= ancestorRect.top && elRect.left >= ancestorRect.left && elRect.bottom <= ancestorRect.bottom && elRect.right <= ancestorRect.right;\n}\nvar OVERFLOW_RE = /auto|scroll|overlay|hidden|clip/;\nvar nonOverflowValues = /* @__PURE__ */ new Set([\"inline\", \"contents\"]);\nfunction isOverflowElement(el) {\n  const win = getWindow(el);\n  const { overflow, overflowX, overflowY, display } = win.getComputedStyle(el);\n  return OVERFLOW_RE.test(overflow + overflowY + overflowX) && !nonOverflowValues.has(display);\n}\nfunction isScrollable(el) {\n  return el.scrollHeight > el.clientHeight || el.scrollWidth > el.clientWidth;\n}\nfunction scrollIntoView(el, options) {\n  const { rootEl, ...scrollOptions } = options || {};\n  if (!el || !rootEl) return;\n  if (!isOverflowElement(rootEl) || !isScrollable(rootEl)) return;\n  el.scrollIntoView(scrollOptions);\n}\nfunction getScrollPosition(element) {\n  if (isHTMLElement(element)) {\n    return { scrollLeft: element.scrollLeft, scrollTop: element.scrollTop };\n  }\n  return { scrollLeft: element.scrollX, scrollTop: element.scrollY };\n}\n\n// src/point.ts\nfunction getRelativePoint(point, element) {\n  const { left, top, width, height } = element.getBoundingClientRect();\n  const offset = { x: point.x - left, y: point.y - top };\n  const percent = { x: clamp(offset.x / width), y: clamp(offset.y / height) };\n  function getPercentValue(options = {}) {\n    const { dir = \"ltr\", orientation = \"horizontal\", inverted } = options;\n    const invertX = typeof inverted === \"object\" ? inverted.x : inverted;\n    const invertY = typeof inverted === \"object\" ? inverted.y : inverted;\n    if (orientation === \"horizontal\") {\n      return dir === \"rtl\" || invertX ? 1 - percent.x : percent.x;\n    }\n    return invertY ? 1 - percent.y : percent.y;\n  }\n  return { offset, percent, getPercentValue };\n}\n\n// src/pointer-lock.ts\nfunction requestPointerLock(doc, fn) {\n  const body = doc.body;\n  const supported = \"pointerLockElement\" in doc || \"mozPointerLockElement\" in doc;\n  const isLocked = () => !!doc.pointerLockElement;\n  function onPointerChange() {\n    fn?.(isLocked());\n  }\n  function onPointerError(event) {\n    if (isLocked()) fn?.(false);\n    console.error(\"PointerLock error occurred:\", event);\n    doc.exitPointerLock();\n  }\n  if (!supported) return;\n  try {\n    body.requestPointerLock();\n  } catch {\n  }\n  const cleanup = [\n    addDomEvent(doc, \"pointerlockchange\", onPointerChange, false),\n    addDomEvent(doc, \"pointerlockerror\", onPointerError, false)\n  ];\n  return () => {\n    cleanup.forEach((cleanup2) => cleanup2());\n    doc.exitPointerLock();\n  };\n}\n\n// src/text-selection.ts\nvar state = \"default\";\nvar userSelect = \"\";\nvar elementMap = /* @__PURE__ */ new WeakMap();\nfunction disableTextSelectionImpl(options = {}) {\n  const { target, doc } = options;\n  const docNode = doc ?? document;\n  const rootEl = docNode.documentElement;\n  if (isIos()) {\n    if (state === \"default\") {\n      userSelect = rootEl.style.webkitUserSelect;\n      rootEl.style.webkitUserSelect = \"none\";\n    }\n    state = \"disabled\";\n  } else if (target) {\n    elementMap.set(target, target.style.userSelect);\n    target.style.userSelect = \"none\";\n  }\n  return () => restoreTextSelection({ target, doc: docNode });\n}\nfunction restoreTextSelection(options = {}) {\n  const { target, doc } = options;\n  const docNode = doc ?? document;\n  const rootEl = docNode.documentElement;\n  if (isIos()) {\n    if (state !== \"disabled\") return;\n    state = \"restoring\";\n    setTimeout(() => {\n      nextTick(() => {\n        if (state === \"restoring\") {\n          if (rootEl.style.webkitUserSelect === \"none\") {\n            rootEl.style.webkitUserSelect = userSelect || \"\";\n          }\n          userSelect = \"\";\n          state = \"default\";\n        }\n      });\n    }, 300);\n  } else {\n    if (target && elementMap.has(target)) {\n      const prevUserSelect = elementMap.get(target);\n      if (target.style.userSelect === \"none\") {\n        target.style.userSelect = prevUserSelect ?? \"\";\n      }\n      if (target.getAttribute(\"style\") === \"\") {\n        target.removeAttribute(\"style\");\n      }\n      elementMap.delete(target);\n    }\n  }\n}\nfunction disableTextSelection(options = {}) {\n  const { defer, target, ...restOptions } = options;\n  const func = defer ? raf : (v) => v();\n  const cleanups = [];\n  cleanups.push(\n    func(() => {\n      const node = typeof target === \"function\" ? target() : target;\n      cleanups.push(disableTextSelectionImpl({ ...restOptions, target: node }));\n    })\n  );\n  return () => {\n    cleanups.forEach((fn) => fn?.());\n  };\n}\n\n// src/pointer-move.ts\nfunction trackPointerMove(doc, handlers) {\n  const { onPointerMove, onPointerUp } = handlers;\n  const handleMove = (event) => {\n    const point = getEventPoint(event);\n    const distance = Math.sqrt(point.x ** 2 + point.y ** 2);\n    const moveBuffer = event.pointerType === \"touch\" ? 10 : 5;\n    if (distance < moveBuffer) return;\n    if (event.pointerType === \"mouse\" && event.button === 0) {\n      handleUp(event);\n      return;\n    }\n    onPointerMove({ point, event });\n  };\n  const handleUp = (event) => {\n    const point = getEventPoint(event);\n    onPointerUp({ point, event });\n  };\n  const cleanups = [\n    addDomEvent(doc, \"pointermove\", handleMove, false),\n    addDomEvent(doc, \"pointerup\", handleUp, false),\n    addDomEvent(doc, \"pointercancel\", handleUp, false),\n    addDomEvent(doc, \"contextmenu\", handleUp, false),\n    disableTextSelection({ doc })\n  ];\n  return () => {\n    cleanups.forEach((cleanup) => cleanup());\n  };\n}\n\n// src/press.ts\nfunction trackPress(options) {\n  const {\n    pointerNode,\n    keyboardNode = pointerNode,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    isValidKey = (e) => e.key === \"Enter\"\n  } = options;\n  if (!pointerNode) return noop;\n  const win = getWindow(pointerNode);\n  let removeStartListeners = noop;\n  let removeEndListeners = noop;\n  let removeAccessibleListeners = noop;\n  const getInfo = (event) => ({\n    point: getEventPoint(event),\n    event\n  });\n  function startPress(event) {\n    onPressStart?.(getInfo(event));\n  }\n  function cancelPress(event) {\n    onPressEnd?.(getInfo(event));\n  }\n  const startPointerPress = (startEvent) => {\n    removeEndListeners();\n    const endPointerPress = (endEvent) => {\n      const target = getEventTarget(endEvent);\n      if (contains(pointerNode, target)) {\n        onPress?.(getInfo(endEvent));\n      } else {\n        onPressEnd?.(getInfo(endEvent));\n      }\n    };\n    const removePointerUpListener = addDomEvent(win, \"pointerup\", endPointerPress, { passive: !onPress, once: true });\n    const removePointerCancelListener = addDomEvent(win, \"pointercancel\", cancelPress, {\n      passive: !onPressEnd,\n      once: true\n    });\n    removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n    if (isActiveElement(keyboardNode) && startEvent.pointerType === \"mouse\") {\n      startEvent.preventDefault();\n    }\n    startPress(startEvent);\n  };\n  const removePointerListener = addDomEvent(pointerNode, \"pointerdown\", startPointerPress, { passive: !onPressStart });\n  const removeFocusListener = addDomEvent(keyboardNode, \"focus\", startAccessiblePress);\n  removeStartListeners = pipe(removePointerListener, removeFocusListener);\n  function startAccessiblePress() {\n    const handleKeydown = (keydownEvent) => {\n      if (!isValidKey(keydownEvent)) return;\n      const handleKeyup = (keyupEvent) => {\n        if (!isValidKey(keyupEvent)) return;\n        const evt2 = new win.PointerEvent(\"pointerup\");\n        const info = getInfo(evt2);\n        onPress?.(info);\n        onPressEnd?.(info);\n      };\n      removeEndListeners();\n      removeEndListeners = addDomEvent(keyboardNode, \"keyup\", handleKeyup);\n      const evt = new win.PointerEvent(\"pointerdown\");\n      startPress(evt);\n    };\n    const handleBlur = () => {\n      const evt = new win.PointerEvent(\"pointercancel\");\n      cancelPress(evt);\n    };\n    const removeKeydownListener = addDomEvent(keyboardNode, \"keydown\", handleKeydown);\n    const removeBlurListener = addDomEvent(keyboardNode, \"blur\", handleBlur);\n    removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n  }\n  return () => {\n    removeStartListeners();\n    removeEndListeners();\n    removeAccessibleListeners();\n  };\n}\n\n// src/proxy-tab-focus.ts\nfunction proxyTabFocusImpl(container, options = {}) {\n  const { triggerElement, onFocus, onFocusEnter } = options;\n  const doc = container?.ownerDocument || document;\n  const body = doc.body;\n  function onKeyDown(event) {\n    if (event.key !== \"Tab\") return;\n    let elementToFocus = null;\n    const [firstTabbable, lastTabbable] = getTabbableEdges(container, true);\n    const nextTabbableAfterTrigger = getNextTabbable(body, triggerElement);\n    const noTabbableElements = !firstTabbable && !lastTabbable;\n    if (event.shiftKey && isActiveElement(nextTabbableAfterTrigger)) {\n      onFocusEnter?.();\n      elementToFocus = lastTabbable;\n    } else if (event.shiftKey && (isActiveElement(firstTabbable) || noTabbableElements)) {\n      elementToFocus = triggerElement;\n    } else if (!event.shiftKey && isActiveElement(triggerElement)) {\n      onFocusEnter?.();\n      elementToFocus = firstTabbable;\n    } else if (!event.shiftKey && (isActiveElement(lastTabbable) || noTabbableElements)) {\n      elementToFocus = nextTabbableAfterTrigger;\n    }\n    if (!elementToFocus) return;\n    event.preventDefault();\n    if (typeof onFocus === \"function\") {\n      onFocus(elementToFocus);\n    } else {\n      elementToFocus.focus();\n    }\n  }\n  return addDomEvent(doc, \"keydown\", onKeyDown, true);\n}\nfunction proxyTabFocus(container, options) {\n  const { defer, triggerElement, ...restOptions } = options;\n  const func = defer ? raf : (v) => v();\n  const cleanups = [];\n  cleanups.push(\n    func(() => {\n      const node = typeof container === \"function\" ? container() : container;\n      const trigger = typeof triggerElement === \"function\" ? triggerElement() : triggerElement;\n      cleanups.push(proxyTabFocusImpl(node, { triggerElement: trigger, ...restOptions }));\n    })\n  );\n  return () => {\n    cleanups.forEach((fn) => fn?.());\n  };\n}\n\n// src/query.ts\nfunction queryAll(root, selector) {\n  return Array.from(root?.querySelectorAll(selector) ?? []);\n}\nfunction query(root, selector) {\n  return root?.querySelector(selector) ?? null;\n}\nvar defaultItemToId = (v) => v.id;\nfunction itemById(v, id, itemToId = defaultItemToId) {\n  return v.find((item) => itemToId(item) === id);\n}\nfunction indexOfId(v, id, itemToId = defaultItemToId) {\n  const item = itemById(v, id, itemToId);\n  return item ? v.indexOf(item) : -1;\n}\nfunction nextById(v, id, loop = true) {\n  let idx = indexOfId(v, id);\n  idx = loop ? (idx + 1) % v.length : Math.min(idx + 1, v.length - 1);\n  return v[idx];\n}\nfunction prevById(v, id, loop = true) {\n  let idx = indexOfId(v, id);\n  if (idx === -1) return loop ? v[v.length - 1] : null;\n  idx = loop ? (idx - 1 + v.length) % v.length : Math.max(0, idx - 1);\n  return v[idx];\n}\n\n// src/resize-observer.ts\nfunction trackElementRect(elements, options) {\n  const { onEntry, measure, box = \"border-box\" } = options;\n  const elems = (Array.isArray(elements) ? elements : [elements]).filter(isHTMLElement);\n  const win = getWindow(elems[0]);\n  const trigger = (entries) => {\n    const rects = elems.map((el) => measure(el));\n    onEntry({ rects, entries });\n  };\n  trigger([]);\n  const obs = new win.ResizeObserver(trigger);\n  elems.forEach((el) => obs.observe(el, { box }));\n  return () => obs.disconnect();\n}\n\n// src/scope.ts\nfunction createScope(methods) {\n  const dom = {\n    getRootNode: (ctx) => ctx.getRootNode?.() ?? document,\n    getDoc: (ctx) => getDocument(dom.getRootNode(ctx)),\n    getWin: (ctx) => dom.getDoc(ctx).defaultView ?? window,\n    getActiveElement: (ctx) => getActiveElement(dom.getRootNode(ctx)),\n    isActiveElement,\n    getById: (ctx, id) => dom.getRootNode(ctx).getElementById(id),\n    setValue: (elem, value) => {\n      if (elem == null || value == null) return;\n      setElementValue(elem, value.toString());\n    }\n  };\n  return { ...dom, ...methods };\n}\n\n// src/searchable.ts\nvar sanitize = (str) => str.split(\"\").map((char) => {\n  const code = char.charCodeAt(0);\n  if (code > 0 && code < 128) return char;\n  if (code >= 128 && code <= 255) return `/x${code.toString(16)}`.replace(\"/\", \"\\\\\");\n  return \"\";\n}).join(\"\").trim();\nvar getValueText = (el) => {\n  return sanitize(el.dataset?.valuetext ?? el.textContent ?? \"\");\n};\nvar match = (valueText, query2) => {\n  return valueText.trim().toLowerCase().startsWith(query2.toLowerCase());\n};\nfunction getByText(v, text, currentId, itemToId = defaultItemToId) {\n  const index = currentId ? indexOfId(v, currentId, itemToId) : -1;\n  let items = currentId ? wrap(v, index) : v;\n  const isSingleKey = text.length === 1;\n  if (isSingleKey) {\n    items = items.filter((item) => itemToId(item) !== currentId);\n  }\n  return items.find((item) => match(getValueText(item), text));\n}\n\n// src/set.ts\nfunction setAttribute(el, attr, v) {\n  const prev = el.getAttribute(attr);\n  const exists = prev != null;\n  el.setAttribute(attr, v);\n  return () => {\n    if (!exists) {\n      el.removeAttribute(attr);\n    } else {\n      el.setAttribute(attr, prev);\n    }\n  };\n}\nfunction setProperty(el, prop, v) {\n  const exists = prop in el;\n  const prev = el[prop];\n  el[prop] = v;\n  return () => {\n    if (!exists) {\n      delete el[prop];\n    } else {\n      el[prop] = prev;\n    }\n  };\n}\nfunction setStyle(el, style) {\n  if (!el) return noop;\n  const prev = Object.keys(style).reduce((acc, key) => {\n    acc[key] = el.style.getPropertyValue(key);\n    return acc;\n  }, {});\n  Object.assign(el.style, style);\n  return () => {\n    Object.assign(el.style, prev);\n    if (el.style.length === 0) {\n      el.removeAttribute(\"style\");\n    }\n  };\n}\nfunction setStyleProperty(el, prop, value) {\n  if (!el) return noop;\n  const prev = el.style.getPropertyValue(prop);\n  el.style.setProperty(prop, value);\n  return () => {\n    el.style.setProperty(prop, prev);\n    if (el.style.length === 0) {\n      el.removeAttribute(\"style\");\n    }\n  };\n}\n\n// src/typeahead.ts\nfunction getByTypeaheadImpl(baseItems, options) {\n  const { state: state2, activeId, key, timeout = 350, itemToId } = options;\n  const search = state2.keysSoFar + key;\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const query2 = isRepeated ? search[0] : search;\n  let items = baseItems.slice();\n  const next = getByText(items, query2, activeId, itemToId);\n  function cleanup() {\n    clearTimeout(state2.timer);\n    state2.timer = -1;\n  }\n  function update(value) {\n    state2.keysSoFar = value;\n    cleanup();\n    if (value !== \"\") {\n      state2.timer = +setTimeout(() => {\n        update(\"\");\n        cleanup();\n      }, timeout);\n    }\n  }\n  update(search);\n  return next;\n}\nvar getByTypeahead = /* @__PURE__ */ Object.assign(getByTypeaheadImpl, {\n  defaultOptions: { keysSoFar: \"\", timer: -1 },\n  isValidEvent: isValidTypeaheadEvent\n});\nfunction isValidTypeaheadEvent(event) {\n  return event.key.length === 1 && !event.ctrlKey && !event.metaKey;\n}\n\n// src/visual-viewport.ts\nfunction trackVisualViewport(doc, fn) {\n  const win = doc?.defaultView || window;\n  const onResize = () => {\n    fn?.(getViewportSize(win));\n  };\n  onResize();\n  return addDomEvent(win.visualViewport ?? win, \"resize\", onResize);\n}\nfunction getViewportSize(win) {\n  return {\n    width: win.visualViewport?.width || win.innerWidth,\n    height: win.visualViewport?.height || win.innerHeight\n  };\n}\n\n// src/visually-hidden.ts\nvar visuallyHiddenStyle = {\n  border: \"0\",\n  clip: \"rect(0 0 0 0)\",\n  height: \"1px\",\n  margin: \"-1px\",\n  overflow: \"hidden\",\n  padding: \"0\",\n  position: \"absolute\",\n  width: \"1px\",\n  whiteSpace: \"nowrap\",\n  wordWrap: \"normal\"\n};\nfunction setVisuallyHidden(el) {\n  Object.assign(el.style, visuallyHiddenStyle);\n}\n\n// src/wait-for.ts\nfunction waitForPromise(promise, controller, timeout) {\n  const { signal } = controller;\n  const wrappedPromise = new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      reject(new Error(`Timeout of ${timeout}ms exceeded`));\n    }, timeout);\n    signal.addEventListener(\"abort\", () => {\n      clearTimeout(timeoutId);\n      reject(new Error(\"Promise aborted\"));\n    });\n    promise.then((result) => {\n      if (!signal.aborted) {\n        clearTimeout(timeoutId);\n        resolve(result);\n      }\n    }).catch((error) => {\n      if (!signal.aborted) {\n        clearTimeout(timeoutId);\n        reject(error);\n      }\n    });\n  });\n  const abort = () => controller.abort();\n  return [wrappedPromise, abort];\n}\nfunction waitForElement(target, options) {\n  const { timeout, rootNode } = options;\n  const win = getWindow(rootNode);\n  const doc = getDocument(rootNode);\n  const controller = new win.AbortController();\n  return waitForPromise(\n    new Promise((resolve) => {\n      const el = target();\n      if (el) {\n        resolve(el);\n        return;\n      }\n      const observer = new win.MutationObserver(() => {\n        const el2 = target();\n        if (el2 && el2.isConnected) {\n          observer.disconnect();\n          resolve(el2);\n        }\n      });\n      observer.observe(doc.body, {\n        childList: true,\n        subtree: true\n      });\n    }),\n    controller,\n    timeout\n  );\n}\n\nexport { MAX_Z_INDEX, addDomEvent, ariaAttr, clickIfLink, contains, createScope, dataAttr, defaultItemToId, disableTextSelection, dispatchInputCheckedEvent, dispatchInputValueEvent, getActiveElement, getBeforeInputValue, getByText, getByTypeahead, getComputedStyle, getDataUrl, getDocument, getDocumentElement, getEventKey, getEventPoint, getEventStep, getEventTarget, getFirstFocusable, getFirstTabbable, getFocusables, getInitialFocus, getLastTabbable, getNativeEvent, getNearestOverflowAncestor, getNextTabbable, getNodeName, getOverflowAncestors, getParentNode, getPlatform, getRelativePoint, getScrollPosition, getTabIndex, getTabbableEdges, getTabbables, getUserAgent, getWindow, indexOfId, isActiveElement, isAnchorElement, isAndroid, isApple, isCaretAtStart, isChrome, isComposingEvent, isContextMenuEvent, isCtrlOrMetaKey, isDocument, isDom, isDownloadingEvent, isEditableElement, isElementVisible, isFirefox, isFocusable, isHTMLElement, isIPad, isIPhone, isInView, isInputElement, isIos, isKeyboardClick, isLeftClick, isMac, isModifierKey, isNode, isOpeningInNewTab, isOverflowElement, isPrintableKey, isRootElement, isSafari, isShadowRoot, isTabbable, isTouchDevice, isTouchEvent, isValidTabEvent, isVirtualClick, isVirtualPointerEvent, isVisualViewport, isWebKit, isWindow, itemById, nextById, nextTick, observeAttributes, observeChildren, prevById, proxyTabFocus, query, queryAll, queueBeforeEvent, raf, requestPointerLock, restoreTextSelection, scrollIntoView, setAttribute, setCaretToEnd, setElementChecked, setElementValue, setProperty, setStyle, setStyleProperty, setVisuallyHidden, trackElementRect, trackFormControl, trackPointerMove, trackPress, trackVisualViewport, visuallyHiddenStyle, waitForElement, waitForPromise };\n", "import { setStyleProperty, setStyle, isIos } from '@zag-js/dom-query';\n\n// src/index.ts\nvar LOCK_CLASSNAME = \"data-scroll-lock\";\nfunction getPaddingProperty(documentElement) {\n  const documentLeft = documentElement.getBoundingClientRect().left;\n  const scrollbarX = Math.round(documentLeft) + documentElement.scrollLeft;\n  return scrollbarX ? \"paddingLeft\" : \"paddingRight\";\n}\nfunction preventBodyScroll(_document) {\n  const doc = _document ?? document;\n  const win = doc.defaultView ?? window;\n  const { documentElement, body } = doc;\n  const locked = body.hasAttribute(LOCK_CLASSNAME);\n  if (locked) return;\n  const scrollbarWidth = win.innerWidth - documentElement.clientWidth;\n  body.setAttribute(LOCK_CLASSNAME, \"\");\n  const setScrollbarWidthProperty = () => setStyleProperty(documentElement, \"--scrollbar-width\", `${scrollbarWidth}px`);\n  const paddingProperty = getPaddingProperty(documentElement);\n  const setBodyStyle = () => setStyle(body, {\n    overflow: \"hidden\",\n    [paddingProperty]: `${scrollbarWidth}px`\n  });\n  const setBodyStyleIOS = () => {\n    const { scrollX, scrollY, visualViewport } = win;\n    const offsetLeft = visualViewport?.offsetLeft ?? 0;\n    const offsetTop = visualViewport?.offsetTop ?? 0;\n    const restoreStyle = setStyle(body, {\n      position: \"fixed\",\n      overflow: \"hidden\",\n      top: `${-(scrollY - Math.floor(offsetTop))}px`,\n      left: `${-(scrollX - Math.floor(offsetLeft))}px`,\n      right: \"0\",\n      [paddingProperty]: `${scrollbarWidth}px`\n    });\n    return () => {\n      restoreStyle?.();\n      win.scrollTo({ left: scrollX, top: scrollY, behavior: \"instant\" });\n    };\n  };\n  const cleanups = [setScrollbarWidthProperty(), isIos() ? setBodyStyleIOS() : setBodyStyle()];\n  return () => {\n    cleanups.forEach((fn) => fn?.());\n    body.removeAttribute(LOCK_CLASSNAME);\n  };\n}\n\nexport { preventBodyScroll };\n", "// Clamp a value between a minimum and maximum value\r\nexport function clamp(min, input, max) {\r\n  return Math.max(min, Math.min(input, max))\r\n}\r\n\r\n// Truncate a floating-point number to a specified number of decimal places\r\nexport function truncate(value, decimals = 0) {\r\n  return parseFloat(value.toFixed(decimals))\r\n}\r\n\r\n// Linearly interpolate between two values using an amount (0 <= t <= 1)\r\nexport function lerp(x, y, t) {\r\n  return (1 - t) * x + t * y\r\n}\r\n\r\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\r\nexport function damp(x, y, lambda, dt) {\r\n  return lerp(x, y, 1 - Math.exp(-lambda * dt))\r\n}\r\n\r\n// Calculate the modulo of the dividend and divisor while keeping the result within the same sign as the divisor\r\n// https://anguscroll.com/just/just-modulo\r\nexport function modulo(n, d) {\r\n  return ((n % d) + d) % d\r\n}\r\n", "import { clamp, damp } from './maths'\r\n\r\n// Animate class to handle value animations with lerping or easing\r\nexport class Animate {\r\n  // Advance the animation by the given delta time\r\n  advance(deltaTime) {\r\n    if (!this.isRunning) return\r\n\r\n    let completed = false\r\n\r\n    if (this.duration && this.easing) {\r\n      this.currentTime += deltaTime\r\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1)\r\n\r\n      completed = linearProgress >= 1\r\n      const easedProgress = completed ? 1 : this.easing(linearProgress)\r\n      this.value = this.from + (this.to - this.from) * easedProgress\r\n    } else if (this.lerp) {\r\n      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime)\r\n      if (Math.round(this.value) === this.to) {\r\n        this.value = this.to\r\n        completed = true\r\n      }\r\n    } else {\r\n      // If no easing or lerp, just jump to the end value\r\n      this.value = this.to\r\n      completed = true\r\n    }\r\n\r\n    if (completed) {\r\n      this.stop()\r\n    }\r\n\r\n    // Call the onUpdate callback with the current value and completed status\r\n    this.onUpdate?.(this.value, completed)\r\n  }\r\n\r\n  // Stop the animation\r\n  stop() {\r\n    this.isRunning = false\r\n  }\r\n\r\n  // Set up the animation from a starting value to an ending value\r\n  // with optional parameters for lerping, duration, easing, and onUpdate callback\r\n  fromTo(from, to, { lerp, duration, easing, onStart, onUpdate }) {\r\n    this.from = this.value = from\r\n    this.to = to\r\n    this.lerp = lerp\r\n    this.duration = duration\r\n    this.easing = easing\r\n    this.currentTime = 0\r\n    this.isRunning = true\r\n\r\n    onStart?.()\r\n    this.onUpdate = onUpdate\r\n  }\r\n}\r\n", "import { debounce } from './debounce'\r\n\r\nexport class Dimensions {\r\n  constructor({\r\n    wrapper,\r\n    content,\r\n    autoResize = true,\r\n    debounce: debounceValue = 250,\r\n  } = {}) {\r\n    this.wrapper = wrapper\r\n    this.content = content\r\n\r\n    if (autoResize) {\r\n      this.debouncedResize = debounce(this.resize, debounceValue)\r\n\r\n      if (this.wrapper === window) {\r\n        window.addEventListener('resize', this.debouncedResize, false)\r\n      } else {\r\n        this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize)\r\n        this.wrapperResizeObserver.observe(this.wrapper)\r\n      }\r\n\r\n      this.contentResizeObserver = new ResizeObserver(this.debouncedResize)\r\n      this.contentResizeObserver.observe(this.content)\r\n    }\r\n\r\n    this.resize()\r\n  }\r\n\r\n  destroy() {\r\n    this.wrapperResizeObserver?.disconnect()\r\n    this.contentResizeObserver?.disconnect()\r\n    window.removeEventListener('resize', this.debouncedResize, false)\r\n  }\r\n\r\n  resize = () => {\r\n    this.onWrapperResize()\r\n    this.onContentResize()\r\n  }\r\n\r\n  onWrapperResize = () => {\r\n    if (this.wrapper === window) {\r\n      this.width = window.innerWidth\r\n      this.height = window.innerHeight\r\n    } else {\r\n      this.width = this.wrapper.clientWidth\r\n      this.height = this.wrapper.clientHeight\r\n    }\r\n  }\r\n\r\n  onContentResize = () => {\r\n    if (this.wrapper === window) {\r\n      this.scrollHeight = this.content.scrollHeight\r\n      this.scrollWidth = this.content.scrollWidth\r\n    } else {\r\n      this.scrollHeight = this.wrapper.scrollHeight\r\n      this.scrollWidth = this.wrapper.scrollWidth\r\n    }\r\n  }\r\n\r\n  get limit() {\r\n    return {\r\n      x: this.scrollWidth - this.width,\r\n      y: this.scrollHeight - this.height,\r\n    }\r\n  }\r\n}\r\n", "export function debounce(callback, delay) {\r\n  let timer\r\n  return function () {\r\n    let args = arguments\r\n    let context = this\r\n    clearTimeout(timer)\r\n    timer = setTimeout(function () {\r\n      callback.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n", "export class Emitter {\r\n  constructor() {\r\n    this.events = {}\r\n  }\r\n\r\n  emit(event, ...args) {\r\n    let callbacks = this.events[event] || []\r\n    for (let i = 0, length = callbacks.length; i < length; i++) {\r\n      callbacks[i](...args)\r\n    }\r\n  }\r\n\r\n  on(event, cb) {\r\n    // Add the callback to the event's callback list, or create a new list with the callback\r\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\r\n\r\n    // Return an unsubscribe function\r\n    return () => {\r\n      this.events[event] = this.events[event]?.filter((i) => cb !== i)\r\n    }\r\n  }\r\n\r\n  off(event, callback) {\r\n    this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n  }\r\n\r\n  destroy() {\r\n    this.events = {}\r\n  }\r\n}\r\n", "import { Emitter } from './emitter'\r\n\r\nconst LINE_HEIGHT = 100 / 6\r\n\r\nexport class VirtualScroll {\r\n  constructor(element, { wheelMultiplier = 1, touchMultiplier = 1 }) {\r\n    this.element = element\r\n    this.wheelMultiplier = wheelMultiplier\r\n    this.touchMultiplier = touchMultiplier\r\n\r\n    this.touchStart = {\r\n      x: null,\r\n      y: null,\r\n    }\r\n\r\n    this.emitter = new Emitter()\r\n    window.addEventListener('resize', this.onWindowResize, false)\r\n    this.onWindowResize()\r\n\r\n    this.element.addEventListener('wheel', this.onWheel, { passive: false })\r\n    this.element.addEventListener('touchstart', this.onTouchStart, {\r\n      passive: false,\r\n    })\r\n    this.element.addEventListener('touchmove', this.onTouchMove, {\r\n      passive: false,\r\n    })\r\n    this.element.addEventListener('touchend', this.onTouchEnd, {\r\n      passive: false,\r\n    })\r\n  }\r\n\r\n  // Add an event listener for the given event and callback\r\n  on(event, callback) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  // Remove all event listeners and clean up\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    window.removeEventListener('resize', this.onWindowResize, false)\r\n\r\n    this.element.removeEventListener('wheel', this.onWheel, {\r\n      passive: false,\r\n    })\r\n    this.element.removeEventListener('touchstart', this.onTouchStart, {\r\n      passive: false,\r\n    })\r\n    this.element.removeEventListener('touchmove', this.onTouchMove, {\r\n      passive: false,\r\n    })\r\n    this.element.removeEventListener('touchend', this.onTouchEnd, {\r\n      passive: false,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'touchstart' event\r\n  onTouchStart = (event) => {\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX: 0,\r\n      deltaY: 0,\r\n      event,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'touchmove' event\r\n  onTouchMove = (event) => {\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    const deltaX = -(clientX - this.touchStart.x) * this.touchMultiplier\r\n    const deltaY = -(clientY - this.touchStart.y) * this.touchMultiplier\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: deltaX,\r\n      y: deltaY,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX,\r\n      deltaY,\r\n      event,\r\n    })\r\n  }\r\n\r\n  onTouchEnd = (event) => {\r\n    this.emitter.emit('scroll', {\r\n      deltaX: this.lastDelta.x,\r\n      deltaY: this.lastDelta.y,\r\n      event,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'wheel' event\r\n  onWheel = (event) => {\r\n    let { deltaX, deltaY, deltaMode } = event\r\n\r\n    const multiplierX =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.windowWidth : 1\r\n    const multiplierY =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.windowHeight : 1\r\n\r\n    deltaX *= multiplierX\r\n    deltaY *= multiplierY\r\n\r\n    deltaX *= this.wheelMultiplier\r\n    deltaY *= this.wheelMultiplier\r\n\r\n    this.emitter.emit('scroll', { deltaX, deltaY, event })\r\n  }\r\n\r\n  onWindowResize = () => {\r\n    this.windowWidth = window.innerWidth\r\n    this.windowHeight = window.innerHeight\r\n  }\r\n}\r\n", "import { version } from '../../../package.json'\r\nimport { Animate } from './animate'\r\nimport { Dimensions } from './dimensions'\r\nimport { Emitter } from './emitter'\r\nimport { clamp, modulo } from './maths'\r\nimport { VirtualScroll } from './virtual-scroll'\r\n\r\n// Technical explanation\r\n// - listen to 'wheel' events\r\n// - prevent 'wheel' event to prevent scroll\r\n// - normalize wheel delta\r\n// - add delta to targetScroll\r\n// - animate scroll to targetScroll (smooth context)\r\n// - if animation is not running, listen to 'scroll' events (native context)\r\n\r\ntype EasingFunction = (t: number) => number\r\ntype Orientation = 'vertical' | 'horizontal'\r\ntype GestureOrientation = 'vertical' | 'horizontal' | 'both'\r\ntype Scrolling = boolean | 'native' | 'smooth'\r\n\r\nexport type LenisOptions = Partial<{\r\n  wrapper: Window | HTMLElement\r\n  content: HTMLElement\r\n  wheelEventsTarget: Window | HTMLElement\r\n  eventsTarget: Window | HTMLElement\r\n  smoothWheel: boolean\r\n  syncTouch: boolean\r\n  syncTouchLerp: number\r\n  touchInertiaMultiplier: number\r\n  duration: number\r\n  easing: EasingFunction\r\n  lerp: number\r\n  infinite: boolean\r\n  orientation: Orientation\r\n  gestureOrientation: GestureOrientation\r\n  touchMultiplier: number\r\n  wheelMultiplier: number\r\n  autoResize: boolean\r\n  prevent: boolean | ((node: Element) => boolean)\r\n  __experimental__naiveDimensions: boolean\r\n}>\r\n\r\nexport default class Lenis {\r\n  // __isSmooth: boolean = false // true if scroll should be animated\r\n  __isScrolling: Scrolling = false // true when scroll is animating\r\n  __isStopped: boolean = false // true if user should not be able to scroll - enable/disable programmatically\r\n  __isLocked: boolean = false // same as isStopped but enabled/disabled when scroll reaches target\r\n\r\n  time: number\r\n  userData: object\r\n  lastVelocity: number\r\n  velocity: number\r\n  direction: 1 | -1 | 0 = 0\r\n  options: LenisOptions\r\n  targetScroll: number\r\n  animatedScroll: number\r\n  // animate: Animate\r\n  // emitter: Emitter\r\n  // dimensions: Dimensions\r\n  // virtualScroll: VirtualScroll\r\n\r\n  constructor({\r\n    wrapper = window,\r\n    content = document.documentElement,\r\n    wheelEventsTarget = wrapper, // deprecated\r\n    eventsTarget = wheelEventsTarget,\r\n    smoothWheel = true,\r\n    syncTouch = false,\r\n    syncTouchLerp = 0.075,\r\n    touchInertiaMultiplier = 35,\r\n    duration, // in seconds\r\n    easing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\r\n    lerp = 0.1,\r\n    infinite = false,\r\n    orientation = 'vertical', // vertical, horizontal\r\n    gestureOrientation = 'vertical', // vertical, horizontal, both\r\n    touchMultiplier = 1,\r\n    wheelMultiplier = 1,\r\n    autoResize = true,\r\n    prevent = false,\r\n    __experimental__naiveDimensions = false,\r\n  }: LenisOptions = {}) {\r\n    // @ts-expect-error\r\n    window.lenisVersion = version\r\n\r\n    // if wrapper is html or body, fallback to window\r\n    if (\r\n      !wrapper ||\r\n      wrapper === document.documentElement ||\r\n      wrapper === document.body\r\n    ) {\r\n      wrapper = window\r\n    }\r\n\r\n    this.options = {\r\n      wrapper,\r\n      content,\r\n      wheelEventsTarget,\r\n      eventsTarget,\r\n      smoothWheel,\r\n      syncTouch,\r\n      syncTouchLerp,\r\n      touchInertiaMultiplier,\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      infinite,\r\n      gestureOrientation,\r\n      orientation,\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n      autoResize,\r\n      prevent,\r\n      __experimental__naiveDimensions,\r\n    }\r\n\r\n    this.animate = new Animate()\r\n    this.emitter = new Emitter()\r\n    this.dimensions = new Dimensions({ wrapper, content, autoResize })\r\n    // this.toggleClassName('lenis', true)\r\n    this.updateClassName()\r\n\r\n    this.userData = {}\r\n    this.time = 0\r\n    this.velocity = this.lastVelocity = 0\r\n    this.isLocked = false\r\n    this.isStopped = false\r\n    // this.hasScrolled = false\r\n    // this.isSmooth = syncTouch || smoothWheel\r\n    // this.isSmooth = false\r\n    this.isScrolling = false\r\n    this.targetScroll = this.animatedScroll = this.actualScroll\r\n\r\n    this.options.wrapper.addEventListener('scroll', this.onNativeScroll, false)\r\n\r\n    this.virtualScroll = new VirtualScroll(eventsTarget, {\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n    })\r\n    this.virtualScroll.on('scroll', this.onVirtualScroll)\r\n  }\r\n\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    this.options.wrapper.removeEventListener(\r\n      'scroll',\r\n      this.onNativeScroll,\r\n      false\r\n    )\r\n\r\n    this.virtualScroll.destroy()\r\n    this.dimensions.destroy()\r\n\r\n    this.cleanUpClassName()\r\n\r\n    // this.rootElement.className = ''\r\n\r\n    // this.toggleClassName('lenis', false)\r\n    // this.toggleClassName('lenis-smooth', false)\r\n    // this.toggleClassName('lenis-scrolling', false)\r\n    // this.toggleClassName('lenis-stopped', false)\r\n    // this.toggleClassName('lenis-locked', false)\r\n  }\r\n\r\n  on(event: string, callback: Function) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  off(event: string, callback: Function) {\r\n    return this.emitter.off(event, callback)\r\n  }\r\n\r\n  private setScroll(scroll: number) {\r\n    // apply scroll value immediately\r\n    if (this.isHorizontal) {\r\n      this.rootElement.scrollLeft = scroll\r\n    } else {\r\n      this.rootElement.scrollTop = scroll\r\n    }\r\n  }\r\n\r\n  private onVirtualScroll = ({\r\n    deltaX,\r\n    deltaY,\r\n    event,\r\n  }: {\r\n    deltaX: number\r\n    deltaY: number\r\n    event: WheelEvent | TouchEvent\r\n  }) => {\r\n    // keep zoom feature\r\n    if (event.ctrlKey) return\r\n\r\n    const isTouch = event.type.includes('touch')\r\n    const isWheel = event.type.includes('wheel')\r\n\r\n    this.isTouching = event.type === 'touchstart' || event.type === 'touchmove'\r\n    // if (event.type === 'touchend') {\r\n    //   console.log('touchend', this.scroll)\r\n    //   // this.lastVelocity = this.velocity\r\n    //   // this.velocity = 0\r\n    //   // this.isScrolling = false\r\n    //   this.emit({ type: 'touchend' })\r\n    //   // alert('touchend')\r\n    //   return\r\n    // }\r\n\r\n    const isTapToStop =\r\n      this.options.syncTouch &&\r\n      isTouch &&\r\n      event.type === 'touchstart' &&\r\n      !this.isStopped &&\r\n      !this.isLocked\r\n\r\n    if (isTapToStop) {\r\n      this.reset()\r\n      return\r\n    }\r\n\r\n    const isClick = deltaX === 0 && deltaY === 0 // click event\r\n\r\n    // const isPullToRefresh =\r\n    //   this.options.gestureOrientation === 'vertical' &&\r\n    //   this.scroll === 0 &&\r\n    //   !this.options.infinite &&\r\n    //   deltaY <= 5 // touch pull to refresh, not reliable yet\r\n\r\n    const isUnknownGesture =\r\n      (this.options.gestureOrientation === 'vertical' && deltaY === 0) ||\r\n      (this.options.gestureOrientation === 'horizontal' && deltaX === 0)\r\n\r\n    if (isClick || isUnknownGesture) {\r\n      // console.log('prevent')\r\n      return\r\n    }\r\n\r\n    // catch if scrolling on nested scroll elements\r\n    let composedPath = event.composedPath()\r\n    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement)) // remove parents elements\r\n\r\n    const prevent = this.options.prevent\r\n\r\n    if (\r\n      !!composedPath.find(\r\n        (node) =>\r\n          node instanceof Element &&\r\n          ((typeof prevent === 'function' ? prevent?.(node) : prevent) ||\r\n            node.hasAttribute?.('data-lenis-prevent') ||\r\n            (isTouch && node.hasAttribute?.('data-lenis-prevent-touch')) ||\r\n            (isWheel && node.hasAttribute?.('data-lenis-prevent-wheel')) ||\r\n            (node.classList?.contains('lenis') &&\r\n              !node.classList?.contains('lenis-stopped'))) // nested lenis instance\r\n      )\r\n    )\r\n      return\r\n\r\n    if (this.isStopped || this.isLocked) {\r\n      event.preventDefault() // this will stop forwarding the event to the parent, this is problematic\r\n      return\r\n    }\r\n\r\n    const isSmooth =\r\n      (this.options.syncTouch && isTouch) ||\r\n      (this.options.smoothWheel && isWheel)\r\n\r\n    if (!isSmooth) {\r\n      this.isScrolling = 'native'\r\n      this.animate.stop()\r\n      return\r\n    }\r\n\r\n    event.preventDefault()\r\n\r\n    let delta = deltaY\r\n    if (this.options.gestureOrientation === 'both') {\r\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX\r\n    } else if (this.options.gestureOrientation === 'horizontal') {\r\n      delta = deltaX\r\n    }\r\n\r\n    const syncTouch = isTouch && this.options.syncTouch\r\n    const isTouchEnd = isTouch && event.type === 'touchend'\r\n\r\n    const hasTouchInertia = isTouchEnd && Math.abs(delta) > 5\r\n\r\n    if (hasTouchInertia) {\r\n      delta = this.velocity * this.options.touchInertiaMultiplier\r\n    }\r\n\r\n    this.scrollTo(this.targetScroll + delta, {\r\n      programmatic: false,\r\n      ...(syncTouch\r\n        ? {\r\n            lerp: hasTouchInertia ? this.options.syncTouchLerp : 1,\r\n          }\r\n        : {\r\n            lerp: this.options.lerp,\r\n            duration: this.options.duration,\r\n            easing: this.options.easing,\r\n          }),\r\n    })\r\n  }\r\n\r\n  resize() {\r\n    this.dimensions.resize()\r\n  }\r\n\r\n  private emit() {\r\n    this.emitter.emit('scroll', this)\r\n  }\r\n\r\n  private onNativeScroll = () => {\r\n    clearTimeout(this.__resetVelocityTimeout)\r\n    delete this.__resetVelocityTimeout\r\n\r\n    if (this.__preventNextNativeScrollEvent) {\r\n      delete this.__preventNextNativeScrollEvent\r\n      return\r\n    }\r\n\r\n    if (this.isScrolling === false || this.isScrolling === 'native') {\r\n      const lastScroll = this.animatedScroll\r\n      this.animatedScroll = this.targetScroll = this.actualScroll\r\n      this.lastVelocity = this.velocity\r\n      this.velocity = this.animatedScroll - lastScroll\r\n      this.direction = Math.sign(\r\n        this.animatedScroll - lastScroll\r\n      ) as Lenis['direction']\r\n      // this.isSmooth = false\r\n      this.isScrolling = 'native'\r\n      this.emit()\r\n\r\n      if (this.velocity !== 0) {\r\n        this.__resetVelocityTimeout = setTimeout(() => {\r\n          this.lastVelocity = this.velocity\r\n          this.velocity = 0\r\n          this.isScrolling = false\r\n          this.emit()\r\n        }, 400)\r\n      }\r\n\r\n      // this.hasScrolled = true\r\n      // }, 50)\r\n    }\r\n  }\r\n\r\n  private reset() {\r\n    this.isLocked = false\r\n    this.isScrolling = false\r\n    this.animatedScroll = this.targetScroll = this.actualScroll\r\n    this.lastVelocity = this.velocity = 0\r\n    this.animate.stop()\r\n  }\r\n\r\n  start() {\r\n    if (!this.isStopped) return\r\n    this.isStopped = false\r\n\r\n    this.reset()\r\n  }\r\n\r\n  stop() {\r\n    if (this.isStopped) return\r\n    this.isStopped = true\r\n    this.animate.stop()\r\n\r\n    this.reset()\r\n  }\r\n\r\n  raf(time: number) {\r\n    const deltaTime = time - (this.time || time)\r\n    this.time = time\r\n\r\n    this.animate.advance(deltaTime * 0.001)\r\n  }\r\n\r\n  scrollTo(\r\n    target: number | string | HTMLElement,\r\n    {\r\n      offset = 0,\r\n      immediate = false,\r\n      lock = false,\r\n      duration = this.options.duration,\r\n      easing = this.options.easing,\r\n      lerp = this.options.lerp,\r\n      onStart,\r\n      onComplete,\r\n      force = false, // scroll even if stopped\r\n      programmatic = true, // called from outside of the class\r\n      userData = {},\r\n    }: {\r\n      offset?: number\r\n      immediate?: boolean\r\n      lock?: boolean\r\n      duration?: number\r\n      easing?: EasingFunction\r\n      lerp?: number\r\n      onStart?: (lenis: Lenis) => void\r\n      onComplete?: (lenis: Lenis) => void\r\n      force?: boolean\r\n      programmatic?: boolean\r\n      userData?: object\r\n    } = {}\r\n  ) {\r\n    if ((this.isStopped || this.isLocked) && !force) return\r\n\r\n    // keywords\r\n    if (\r\n      typeof target === 'string' &&\r\n      ['top', 'left', 'start'].includes(target)\r\n    ) {\r\n      target = 0\r\n    } else if (\r\n      typeof target === 'string' &&\r\n      ['bottom', 'right', 'end'].includes(target)\r\n    ) {\r\n      target = this.limit\r\n    } else {\r\n      let node\r\n\r\n      if (typeof target === 'string') {\r\n        // CSS selector\r\n        node = document.querySelector(target)\r\n      } else if (target instanceof HTMLElement && target?.nodeType) {\r\n        // Node element\r\n        node = target\r\n      }\r\n\r\n      if (node) {\r\n        if (this.options.wrapper !== window) {\r\n          // nested scroll offset correction\r\n          const wrapperRect = this.rootElement.getBoundingClientRect()\r\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top\r\n        }\r\n\r\n        const rect = node.getBoundingClientRect()\r\n\r\n        target =\r\n          (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll\r\n      }\r\n    }\r\n\r\n    if (typeof target !== 'number') return\r\n\r\n    target += offset\r\n    target = Math.round(target)\r\n\r\n    if (this.options.infinite) {\r\n      if (programmatic) {\r\n        this.targetScroll = this.animatedScroll = this.scroll\r\n      }\r\n    } else {\r\n      target = clamp(0, target, this.limit)\r\n    }\r\n\r\n    if (target === this.targetScroll) return\r\n\r\n    this.userData = userData\r\n\r\n    if (immediate) {\r\n      this.animatedScroll = this.targetScroll = target\r\n      this.setScroll(this.scroll)\r\n      this.reset()\r\n      this.preventNextNativeScrollEvent()\r\n      this.emit()\r\n      onComplete?.(this)\r\n      this.userData = {}\r\n      return\r\n    }\r\n\r\n    if (!programmatic) {\r\n      this.targetScroll = target\r\n    }\r\n\r\n    this.animate.fromTo(this.animatedScroll, target, {\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      onStart: () => {\r\n        // started\r\n        if (lock) this.isLocked = true\r\n        this.isScrolling = 'smooth'\r\n        onStart?.(this)\r\n      },\r\n      onUpdate: (value: number, completed: boolean) => {\r\n        this.isScrolling = 'smooth'\r\n\r\n        // updated\r\n        this.lastVelocity = this.velocity\r\n        this.velocity = value - this.animatedScroll\r\n        this.direction = Math.sign(this.velocity) as Lenis['direction']\r\n\r\n        this.animatedScroll = value\r\n        this.setScroll(this.scroll)\r\n\r\n        if (programmatic) {\r\n          // wheel during programmatic should stop it\r\n          this.targetScroll = value\r\n        }\r\n\r\n        if (!completed) this.emit()\r\n\r\n        if (completed) {\r\n          this.reset()\r\n          this.emit()\r\n          onComplete?.(this)\r\n          this.userData = {}\r\n\r\n          // avoid emitting event twice\r\n          this.preventNextNativeScrollEvent()\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  private preventNextNativeScrollEvent() {\r\n    this.__preventNextNativeScrollEvent = true\r\n\r\n    requestAnimationFrame(() => {\r\n      delete this.__preventNextNativeScrollEvent\r\n    })\r\n  }\r\n\r\n  get rootElement() {\r\n    return (\r\n      this.options.wrapper === window\r\n        ? document.documentElement\r\n        : this.options.wrapper\r\n    ) as HTMLElement\r\n  }\r\n\r\n  get limit() {\r\n    if (this.options.__experimental__naiveDimensions) {\r\n      if (this.isHorizontal) {\r\n        return this.rootElement.scrollWidth - this.rootElement.clientWidth\r\n      } else {\r\n        return this.rootElement.scrollHeight - this.rootElement.clientHeight\r\n      }\r\n    } else {\r\n      return this.dimensions.limit[this.isHorizontal ? 'x' : 'y']\r\n    }\r\n  }\r\n\r\n  get isHorizontal() {\r\n    return this.options.orientation === 'horizontal'\r\n  }\r\n\r\n  get actualScroll(): number {\r\n    // value browser takes into account\r\n    return this.isHorizontal\r\n      ? this.rootElement.scrollLeft\r\n      : this.rootElement.scrollTop\r\n  }\r\n\r\n  get scroll(): number {\r\n    return this.options.infinite\r\n      ? modulo(this.animatedScroll, this.limit)\r\n      : this.animatedScroll\r\n  }\r\n\r\n  get progress(): number {\r\n    // avoid progress to be NaN\r\n    return this.limit === 0 ? 1 : this.scroll / this.limit\r\n  }\r\n\r\n  // get isSmooth() {\r\n  //   return this.__isSmooth\r\n  // }\r\n\r\n  // private set isSmooth(value: boolean) {\r\n  //   if (this.__isSmooth !== value) {\r\n  //     this.__isSmooth = value\r\n  //     this.updateClassName()\r\n  //   }\r\n  // }\r\n\r\n  get isScrolling() {\r\n    return this.__isScrolling\r\n  }\r\n\r\n  private set isScrolling(value: Scrolling) {\r\n    if (this.__isScrolling !== value) {\r\n      this.__isScrolling = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isStopped() {\r\n    return this.__isStopped\r\n  }\r\n\r\n  private set isStopped(value: boolean) {\r\n    if (this.__isStopped !== value) {\r\n      this.__isStopped = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isLocked() {\r\n    return this.__isLocked\r\n  }\r\n\r\n  private set isLocked(value: boolean) {\r\n    if (this.__isLocked !== value) {\r\n      this.__isLocked = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  get isSmooth() {\r\n    return this.isScrolling === 'smooth'\r\n  }\r\n\r\n  get className() {\r\n    let className = 'lenis'\r\n    if (this.isStopped) className += ' lenis-stopped'\r\n    if (this.isLocked) className += ' lenis-locked'\r\n    if (this.isScrolling) className += ' lenis-scrolling'\r\n    if (this.isScrolling === 'smooth') className += ' lenis-smooth'\r\n    // if (this.isScrolling === 'native') className += ' lenis-native'\r\n    // if (this.isSmooth) className += ' lenis-smooth'\r\n    return className\r\n  }\r\n\r\n  private updateClassName() {\r\n    this.cleanUpClassName()\r\n\r\n    this.rootElement.className =\r\n      `${this.rootElement.className} ${this.className}`.trim()\r\n  }\r\n\r\n  private cleanUpClassName() {\r\n    this.rootElement.className = this.rootElement.className\r\n      .replace(/lenis(-\\w+)?/g, '')\r\n      .trim()\r\n  }\r\n}\r\n", "import { preventBodyScroll } from \"@zag-js/remove-scroll\";\r\nimport Lenis from \"lenis\";\r\n\r\n// Extend Window interface to include getLenis function\r\ndeclare global {\r\n  interface Window {\r\n    getLenis: () => Lenis | null;\r\n  }\r\n}\r\n\r\nconst selectors = {\r\n  toggleScroll: \"[data-toggle-scroll]\",\r\n  startScroll: \"[data-start-scroll]\",\r\n  stopScroll: \"[data-stop-scroll]\",\r\n} as const;\r\n\r\nconst init = () => {\r\n  const noSmoothScroll = document.body.dataset.noSmoothScroll !== undefined;\r\n\r\n  const activateLenis = () => {\r\n    return noSmoothScroll\r\n      ? null\r\n      : new Lenis({\r\n          lerp: 0.1,\r\n          wheelMultiplier: 0.7,\r\n          gestureOrientation: \"vertical\",\r\n        });\r\n  };\r\n\r\n  let lenis = activateLenis();\r\n\r\n  function raf(time: number) {\r\n    lenis?.raf(time);\r\n    requestAnimationFrame(raf);\r\n  }\r\n\r\n  requestAnimationFrame(raf);\r\n\r\n  const scrollTogglers = [...document.querySelectorAll(selectors.toggleScroll)] as HTMLElement[];\r\n  const scrollStartTriggers = [\r\n    ...document.querySelectorAll(selectors.startScroll),\r\n  ] as HTMLElement[];\r\n  const scrollStopTriggers = [...document.querySelectorAll(selectors.stopScroll)] as HTMLElement[];\r\n\r\n  let resetScroll: (() => void) | undefined = undefined;\r\n\r\n  for (let i = 0; i < scrollTogglers.length; i++) {\r\n    const scrollToggleElement = scrollTogglers[i];\r\n\r\n    scrollToggleElement.addEventListener(\"click\", () => {\r\n      if (scrollToggleElement.classList.contains(\"stop-scroll\")) {\r\n        resetScroll?.();\r\n        lenis = activateLenis();\r\n        scrollToggleElement.classList.remove(\"stop-scroll\");\r\n        return;\r\n      }\r\n      resetScroll = preventBodyScroll();\r\n      lenis?.destroy();\r\n      scrollToggleElement.classList.add(\"stop-scroll\");\r\n    });\r\n  }\r\n\r\n  for (const startTrigger of scrollStartTriggers) {\r\n    startTrigger.addEventListener(\"click\", () => {\r\n      lenis = activateLenis();\r\n      resetScroll?.();\r\n    });\r\n  }\r\n\r\n  for (const stopTrigger of scrollStopTriggers) {\r\n    stopTrigger.addEventListener(\"click\", () => {\r\n      lenis?.destroy();\r\n      resetScroll = preventBodyScroll();\r\n    });\r\n  }\r\n\r\n  // Expose Lenis instance to window\r\n  window.getLenis = () => lenis;\r\n};\r\n\r\ninit();\r\n"],
  "mappings": "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",
  "names": ["clamp", "min", "input", "max", "Math", "Animate", "deltaTime", "this", "isRunning", "completed", "duration", "easing", "currentTime", "linearProgress", "easedProgress", "value", "from", "to", "lerp", "damp", "x", "y", "lambda", "dt", "t", "exp", "round", "stop", "onUpdate", "onStart", "Dimensions", "constructor", "wrapper", "content", "autoResize", "debounce", "debounceValue", "debouncedResize", "callback", "delay", "timer", "args", "arguments", "context", "clearTimeout", "setTimeout", "apply", "resize", "window", "addEventListener", "wrapperResizeObserver", "ResizeObserver", "observe", "contentResizeObserver", "destroy", "disconnect", "removeEventListener", "onWrapperResize", "onContentResize", "width", "innerWidth", "height", "innerHeight", "clientWidth", "clientHeight", "scrollHeight", "scrollWidth", "limit", "Emitter", "events", "event", "callbacks", "i", "length", "cb", "push", "filter", "LINE_HEIGHT", "VirtualScroll", "element", "wheelMultiplier", "touchMultiplier", "touchStart", "emitter", "onWindowResize", "onWheel", "passive", "onTouchStart", "onTouchMove", "onTouchEnd", "on", "clientX", "clientY", "targetTouches", "lastDelta", "emit", "deltaX", "deltaY", "deltaMode", "windowWidth", "windowHeight", "Lenis", "document", "documentElement", "wheelEventsTarget", "eventsTarget", "smoothWheel", "syncTouch", "syncTouchLerp", "touchInertiaMultiplier", "pow", "infinite", "orientation", "gestureOrientation", "prevent", "__experimental__naiveDimensions", "__isScrolling", "__isStopped", "__isLocked", "direction", "onVirtualScroll", "ctrlKey", "isTouch", "type", "includes", "isWheel", "isTouching", "options", "isStopped", "isLocked", "reset", "isClick", "isUnknownGesture", "composedPath", "slice", "indexOf", "rootElement", "find", "node", "Element", "_a", "hasAttribute", "call", "_b", "_c", "r", "classList", "_d", "contains", "_e", "preventDefault", "isScrolling", "animate", "delta", "abs", "hasTouchInertia", "velocity", "scrollTo", "targetScroll", "Object", "assign", "programmatic", "onNativeScroll", "__resetVelocityTimeout", "__preventNextNativeScrollEvent", "lastScroll", "animatedScroll", "actualScroll", "lastVelocity", "sign", "lenisVersion", "body", "dimensions", "updateClassName", "userData", "time", "virtualScroll", "cleanUpClassName", "off", "scroll", "isHorizontal", "scrollLeft", "scrollTop", "start", "advance", "target", "offset", "immediate", "lock", "onComplete", "force", "querySelector", "HTMLElement", "nodeType", "wrapperRect", "getBoundingClientRect", "left", "top", "rect", "setScroll", "preventNextNativeScrollEvent", "fromTo", "requestAnimationFrame", "modulo", "n", "d", "progress", "isSmooth", "className", "trim", "replace"]
}
