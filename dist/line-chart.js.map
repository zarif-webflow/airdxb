{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../node_modules/.pnpm/@kurkle+color@0.3.2/node_modules/@kurkle/color/dist/color.esm.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.core.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.math.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.collection.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.extras.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.easing.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.color.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.animations.defaults.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.layouts.defaults.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.intl.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.ticks.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.scale.defaults.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.defaults.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.canvas.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.options.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.config.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.curve.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.dom.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.interpolation.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.rtl.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/helpers/helpers.segment.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.animator.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.animation.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.animations.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.datasetController.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/controllers/controller.bar.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/controllers/controller.bubble.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/controllers/controller.doughnut.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/controllers/controller.line.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/controllers/controller.polarArea.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/controllers/controller.pie.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/controllers/controller.radar.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/controllers/controller.scatter.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.adapters.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.interaction.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.layouts.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/platform/platform.base.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/platform/platform.basic.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/platform/platform.dom.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/platform/index.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.element.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.scale.autoskip.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.scale.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.typedRegistry.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.registry.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.plugins.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.config.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/core/core.controller.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/elements/element.arc.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/elements/element.line.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/elements/element.point.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/elements/element.bar.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.colors.ts", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.decimation.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.filler/filler.segment.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.filler/filler.helper.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.filler/filler.options.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.filler/filler.target.stack.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.filler/simpleArc.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.filler/filler.target.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.filler/filler.drawing.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.filler/index.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.legend.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.title.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.subtitle.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/plugins/plugin.tooltip.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/scales/scale.category.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/scales/scale.linearbase.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/scales/scale.linear.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/scales/scale.logarithmic.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/scales/scale.radialLinear.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/scales/scale.time.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/scales/scale.timeseries.js", "../node_modules/.pnpm/chart.js@4.4.3/node_modules/chart.js/src/index.ts", "../src/utils/constants.ts", "../src/utils/static-data.ts", "../src/utils/util.ts", "../src/chart/line-chart.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\r\n", "/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n", "/**\n * @namespace Chart.helpers\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ActiveDataPoint, ChartEvent} from '../types/index.js';\n\n/**\n * An empty function that can be used, for example, for optional callback.\n */\nexport function noop() {\n  /* noop */\n}\n\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */\nexport const uid = (() => {\n  let id = 0;\n  return () => id++;\n})();\n\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */\nexport function isNullOrUndef(value: unknown): value is null | undefined {\n  return value === null || typeof value === 'undefined';\n}\n\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */\nexport function isArray<T = unknown>(value: unknown): value is T[] {\n  if (Array.isArray && Array.isArray(value)) {\n    return true;\n  }\n  const type = Object.prototype.toString.call(value);\n  if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */\nexport function isObject(value: unknown): value is AnyObject {\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */\nfunction isNumberFinite(value: unknown): value is number {\n  return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\nexport {\n  isNumberFinite as isFinite,\n};\n\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */\nexport function finiteOrDefault(value: unknown, defaultValue: number) {\n  return isNumberFinite(value) ? value : defaultValue;\n}\n\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */\nexport function valueOrDefault<T>(value: T | undefined, defaultValue: T) {\n  return typeof value === 'undefined' ? defaultValue : value;\n}\n\nexport const toPercentage = (value: number | string, dimension: number) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100\n    : +value / dimension;\n\nexport const toDimension = (value: number | string, dimension: number) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100 * dimension\n    : +value;\n\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */\nexport function callback<T extends (this: TA, ...restArgs: unknown[]) => R, TA, R>(\n  fn: T | undefined,\n  args: unknown[],\n  thisArg?: TA\n): R | undefined {\n  if (fn && typeof fn.call === 'function') {\n    return fn.apply(thisArg, args);\n  }\n}\n\n/**\n * Note(SB) for performance sake, this method should only be used when loopable type\n * is unknown or in none intensive code (not called often and small loopable). Else\n * it's preferable to use a regular for() loop and save extra function calls.\n * @param loopable - The object or array to be iterated.\n * @param fn - The function to call for each item.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n * @param [reverse] - If true, iterates backward on the loopable.\n */\nexport function each<T, TA>(\n  loopable: Record<string, T>,\n  fn: (this: TA, v: T, i: string) => void,\n  thisArg?: TA,\n  reverse?: boolean\n): void;\nexport function each<T, TA>(\n  loopable: T[],\n  fn: (this: TA, v: T, i: number) => void,\n  thisArg?: TA,\n  reverse?: boolean\n): void;\nexport function each<T, TA>(\n  loopable: T[] | Record<string, T>,\n  fn: (this: TA, v: T, i: any) => void,\n  thisArg?: TA,\n  reverse?: boolean\n) {\n  let i: number, len: number, keys: string[];\n  if (isArray(loopable)) {\n    len = loopable.length;\n    if (reverse) {\n      for (i = len - 1; i >= 0; i--) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    }\n  } else if (isObject(loopable)) {\n    keys = Object.keys(loopable);\n    len = keys.length;\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n  }\n}\n\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */\nexport function _elementsEqual(a0: ActiveDataPoint[], a1: ActiveDataPoint[]) {\n  let i: number, ilen: number, v0: ActiveDataPoint, v1: ActiveDataPoint;\n\n  if (!a0 || !a1 || a0.length !== a1.length) {\n    return false;\n  }\n\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\n    v0 = a0[i];\n    v1 = a1[i];\n\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */\nexport function clone<T>(source: T): T {\n  if (isArray(source)) {\n    return source.map(clone) as unknown as T;\n  }\n\n  if (isObject(source)) {\n    const target = Object.create(null);\n    const keys = Object.keys(source);\n    const klen = keys.length;\n    let k = 0;\n\n    for (; k < klen; ++k) {\n      target[keys[k]] = clone(source[keys[k]]);\n    }\n\n    return target;\n  }\n\n  return source;\n}\n\nfunction isValidKey(key: string) {\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n}\n\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */\nexport function _merger(key: string, target: AnyObject, source: AnyObject, options: AnyObject) {\n  if (!isValidKey(key)) {\n    return;\n  }\n\n  const tval = target[key];\n  const sval = source[key];\n\n  if (isObject(tval) && isObject(sval)) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    merge(tval, sval, options);\n  } else {\n    target[key] = clone(sval);\n  }\n}\n\nexport interface MergeOptions {\n  merger?: (key: string, target: AnyObject, source: AnyObject, options?: AnyObject) => void;\n}\n\n/**\n * Recursively deep copies `source` properties into `target` with the given `options`.\n * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n * @param target - The target object in which all sources are merged into.\n * @param source - Object(s) to merge into `target`.\n * @param [options] - Merging options:\n * @param [options.merger] - The merge method (key, target, source, options)\n * @returns The `target` object.\n */\nexport function merge<T>(target: T, source: [], options?: MergeOptions): T;\nexport function merge<T, S1>(target: T, source: S1, options?: MergeOptions): T & S1;\nexport function merge<T, S1>(target: T, source: [S1], options?: MergeOptions): T & S1;\nexport function merge<T, S1, S2>(target: T, source: [S1, S2], options?: MergeOptions): T & S1 & S2;\nexport function merge<T, S1, S2, S3>(target: T, source: [S1, S2, S3], options?: MergeOptions): T & S1 & S2 & S3;\nexport function merge<T, S1, S2, S3, S4>(\n  target: T,\n  source: [S1, S2, S3, S4],\n  options?: MergeOptions\n): T & S1 & S2 & S3 & S4;\nexport function merge<T>(target: T, source: AnyObject[], options?: MergeOptions): AnyObject;\nexport function merge<T>(target: T, source: AnyObject[], options?: MergeOptions): AnyObject {\n  const sources = isArray(source) ? source : [source];\n  const ilen = sources.length;\n\n  if (!isObject(target)) {\n    return target as AnyObject;\n  }\n\n  options = options || {};\n  const merger = options.merger || _merger;\n  let current: AnyObject;\n\n  for (let i = 0; i < ilen; ++i) {\n    current = sources[i];\n    if (!isObject(current)) {\n      continue;\n    }\n\n    const keys = Object.keys(current);\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\n      merger(keys[k], target, current, options as AnyObject);\n    }\n  }\n\n  return target;\n}\n\n/**\n * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n * @param target - The target object in which all sources are merged into.\n * @param source - Object(s) to merge into `target`.\n * @returns The `target` object.\n */\nexport function mergeIf<T>(target: T, source: []): T;\nexport function mergeIf<T, S1>(target: T, source: S1): T & S1;\nexport function mergeIf<T, S1>(target: T, source: [S1]): T & S1;\nexport function mergeIf<T, S1, S2>(target: T, source: [S1, S2]): T & S1 & S2;\nexport function mergeIf<T, S1, S2, S3>(target: T, source: [S1, S2, S3]): T & S1 & S2 & S3;\nexport function mergeIf<T, S1, S2, S3, S4>(target: T, source: [S1, S2, S3, S4]): T & S1 & S2 & S3 & S4;\nexport function mergeIf<T>(target: T, source: AnyObject[]): AnyObject;\nexport function mergeIf<T>(target: T, source: AnyObject[]): AnyObject {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  return merge<T>(target, source, {merger: _mergerIf});\n}\n\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */\nexport function _mergerIf(key: string, target: AnyObject, source: AnyObject) {\n  if (!isValidKey(key)) {\n    return;\n  }\n\n  const tval = target[key];\n  const sval = source[key];\n\n  if (isObject(tval) && isObject(sval)) {\n    mergeIf(tval, sval);\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n    target[key] = clone(sval);\n  }\n}\n\n/**\n * @private\n */\nexport function _deprecated(scope: string, value: unknown, previous: string, current: string) {\n  if (value !== undefined) {\n    console.warn(scope + ': \"' + previous +\n      '\" is deprecated. Please use \"' + current + '\" instead');\n  }\n}\n\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n  // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n  '': v => v,\n  // default resolvers\n  x: o => o.x,\n  y: o => o.y\n};\n\n/**\n * @private\n */\nexport function _splitKey(key: string) {\n  const parts = key.split('.');\n  const keys: string[] = [];\n  let tmp = '';\n  for (const part of parts) {\n    tmp += part;\n    if (tmp.endsWith('\\\\')) {\n      tmp = tmp.slice(0, -1) + '.';\n    } else {\n      keys.push(tmp);\n      tmp = '';\n    }\n  }\n  return keys;\n}\n\nfunction _getKeyResolver(key: string) {\n  const keys = _splitKey(key);\n  return obj => {\n    for (const k of keys) {\n      if (k === '') {\n        // For backward compatibility:\n        // Chart.helpers.core resolveObjectKey should break at empty key\n        break;\n      }\n      obj = obj && obj[k];\n    }\n    return obj;\n  };\n}\n\nexport function resolveObjectKey(obj: AnyObject, key: string): any {\n  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n  return resolver(obj);\n}\n\n/**\n * @private\n */\nexport function _capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\nexport const defined = (value: unknown) => typeof value !== 'undefined';\n\nexport const isFunction = (value: unknown): value is (...args: any[]) => any => typeof value === 'function';\n\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nexport const setsEqual = <T>(a: Set<T>, b: Set<T>) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * @param e - The event\n * @private\n */\nexport function _isClickEvent(e: ChartEvent) {\n  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n", "import type {Point} from '../types/geometric.js';\nimport {isFinite as isFiniteNumber} from './helpers.core.js';\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */\n\nexport const PI = Math.PI;\nexport const TAU = 2 * PI;\nexport const PITAU = TAU + PI;\nexport const INFINITY = Number.POSITIVE_INFINITY;\nexport const RAD_PER_DEG = PI / 180;\nexport const HALF_PI = PI / 2;\nexport const QUARTER_PI = PI / 4;\nexport const TWO_THIRDS_PI = PI * 2 / 3;\n\nexport const log10 = Math.log10;\nexport const sign = Math.sign;\n\nexport function almostEquals(x: number, y: number, epsilon: number) {\n  return Math.abs(x - y) < epsilon;\n}\n\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */\nexport function niceNum(range: number) {\n  const roundedRange = Math.round(range);\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\n  const fraction = range / niceRange;\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n  return niceFraction * niceRange;\n}\n\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */\nexport function _factorize(value: number) {\n  const result: number[] = [];\n  const sqrt = Math.sqrt(value);\n  let i: number;\n\n  for (i = 1; i < sqrt; i++) {\n    if (value % i === 0) {\n      result.push(i);\n      result.push(value / i);\n    }\n  }\n  if (sqrt === (sqrt | 0)) { // if value is a square number\n    result.push(sqrt);\n  }\n\n  result.sort((a, b) => a - b).pop();\n  return result;\n}\n\nexport function isNumber(n: unknown): n is number {\n  return !isNaN(parseFloat(n as string)) && isFinite(n as number);\n}\n\nexport function almostWhole(x: number, epsilon: number) {\n  const rounded = Math.round(x);\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n}\n\n/**\n * @private\n */\nexport function _setMinAndMaxByKey(\n  array: Record<string, number>[],\n  target: { min: number, max: number },\n  property: string\n) {\n  let i: number, ilen: number, value: number;\n\n  for (i = 0, ilen = array.length; i < ilen; i++) {\n    value = array[i][property];\n    if (!isNaN(value)) {\n      target.min = Math.min(target.min, value);\n      target.max = Math.max(target.max, value);\n    }\n  }\n}\n\nexport function toRadians(degrees: number) {\n  return degrees * (PI / 180);\n}\n\nexport function toDegrees(radians: number) {\n  return radians * (180 / PI);\n}\n\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */\nexport function _decimalPlaces(x: number) {\n  if (!isFiniteNumber(x)) {\n    return;\n  }\n  let e = 1;\n  let p = 0;\n  while (Math.round(x * e) / e !== x) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}\n\n// Gets the angle from vertical upright to the point about a centre.\nexport function getAngleFromPoint(\n  centrePoint: Point,\n  anglePoint: Point\n) {\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n  if (angle < (-0.5 * PI)) {\n    angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n  }\n\n  return {\n    angle,\n    distance: radialDistanceFromCenter\n  };\n}\n\nexport function distanceBetweenPoints(pt1: Point, pt2: Point) {\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */\nexport function _angleDiff(a: number, b: number) {\n  return (a - b + PITAU) % TAU - PI;\n}\n\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */\nexport function _normalizeAngle(a: number) {\n  return (a % TAU + TAU) % TAU;\n}\n\n/**\n * @private\n */\nexport function _angleBetween(angle: number, start: number, end: number, sameAngleIsFullCircle?: boolean) {\n  const a = _normalizeAngle(angle);\n  const s = _normalizeAngle(start);\n  const e = _normalizeAngle(end);\n  const angleToStart = _normalizeAngle(s - a);\n  const angleToEnd = _normalizeAngle(e - a);\n  const startToAngle = _normalizeAngle(a - s);\n  const endToAngle = _normalizeAngle(a - e);\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\n}\n\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */\nexport function _limitValue(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * @param {number} value\n * @private\n */\nexport function _int16Range(value: number) {\n  return _limitValue(value, -32768, 32767);\n}\n\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */\nexport function _isBetween(value: number, start: number, end: number, epsilon = 1e-6) {\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n", "import {_capitalize} from './helpers.core.js';\n\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param value - value to find\n * @param cmp\n * @private\n */\nexport function _lookup(\n  table: number[],\n  value: number,\n  cmp?: (value: number) => boolean\n): {lo: number, hi: number};\nexport function _lookup<T>(\n  table: T[],\n  value: number,\n  cmp: (value: number) => boolean\n): {lo: number, hi: number};\nexport function _lookup(\n  table: unknown[],\n  value: number,\n  cmp?: (value: number) => boolean\n) {\n  cmp = cmp || ((index) => table[index] < value);\n  let hi = table.length - 1;\n  let lo = 0;\n  let mid: number;\n\n  while (hi - lo > 1) {\n    mid = (lo + hi) >> 1;\n    if (cmp(mid)) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n\n  return {lo, hi};\n}\n\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */\nexport const _lookupByKey = (\n  table: Record<string, number>[],\n  key: string,\n  value: number,\n  last?: boolean\n) =>\n  _lookup(table, value, last\n    ? index => {\n      const ti = table[index][key];\n      return ti < value || ti === value && table[index + 1][key] === value;\n    }\n    : index => table[index][key] < value);\n\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */\nexport const _rlookupByKey = (\n  table: Record<string, number>[],\n  key: string,\n  value: number\n) =>\n  _lookup(table, value, index => table[index][key] >= value);\n\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */\nexport function _filterBetween(values: number[], min: number, max: number) {\n  let start = 0;\n  let end = values.length;\n\n  while (start < end && values[start] < min) {\n    start++;\n  }\n  while (end > start && values[end - 1] > max) {\n    end--;\n  }\n\n  return start > 0 || end < values.length\n    ? values.slice(start, end)\n    : values;\n}\n\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'] as const;\n\nexport interface ArrayListener<T> {\n  _onDataPush?(...item: T[]): void;\n  _onDataPop?(): void;\n  _onDataShift?(): void;\n  _onDataSplice?(index: number, deleteCount: number, ...items: T[]): void;\n  _onDataUnshift?(...item: T[]): void;\n}\n\n/**\n * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n * called on the '_onData*' callbacks (e.g. _onDataPush, etc.) with same arguments.\n */\nexport function listenArrayEvents<T>(array: T[], listener: ArrayListener<T>): void;\nexport function listenArrayEvents(array, listener) {\n  if (array._chartjs) {\n    array._chartjs.listeners.push(listener);\n    return;\n  }\n\n  Object.defineProperty(array, '_chartjs', {\n    configurable: true,\n    enumerable: false,\n    value: {\n      listeners: [listener]\n    }\n  });\n\n  arrayEvents.forEach((key) => {\n    const method = '_onData' + _capitalize(key);\n    const base = array[key];\n\n    Object.defineProperty(array, key, {\n      configurable: true,\n      enumerable: false,\n      value(...args) {\n        const res = base.apply(this, args);\n\n        array._chartjs.listeners.forEach((object) => {\n          if (typeof object[method] === 'function') {\n            object[method](...args);\n          }\n        });\n\n        return res;\n      }\n    });\n  });\n}\n\n\n/**\n * Removes the given array event listener and cleanup extra attached properties (such as\n * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n */\nexport function unlistenArrayEvents<T>(array: T[], listener: ArrayListener<T>): void;\nexport function unlistenArrayEvents(array, listener) {\n  const stub = array._chartjs;\n  if (!stub) {\n    return;\n  }\n\n  const listeners = stub.listeners;\n  const index = listeners.indexOf(listener);\n  if (index !== -1) {\n    listeners.splice(index, 1);\n  }\n\n  if (listeners.length > 0) {\n    return;\n  }\n\n  arrayEvents.forEach((key) => {\n    delete array[key];\n  });\n\n  delete array._chartjs;\n}\n\n/**\n * @param items\n */\nexport function _arrayUnique<T>(items: T[]) {\n  const set = new Set<T>(items);\n\n  if (set.size === items.length) {\n    return items;\n  }\n\n  return Array.from(set);\n}\n", "import type {ChartMeta, PointElement} from '../types/index.js';\n\nimport {_limitValue} from './helpers.math.js';\nimport {_lookupByKey} from './helpers.collection.js';\n\nexport function fontString(pixelSize: number, fontStyle: string, fontFamily: string) {\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n\n/**\n* Request animation polyfill\n*/\nexport const requestAnimFrame = (function() {\n  if (typeof window === 'undefined') {\n    return function(callback) {\n      return callback();\n    };\n  }\n  return window.requestAnimationFrame;\n}());\n\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */\nexport function throttled<TArgs extends Array<any>>(\n  fn: (...args: TArgs) => void,\n  thisArg: any,\n) {\n  let argsToUse = [] as TArgs;\n  let ticking = false;\n\n  return function(...args: TArgs) {\n    // Save the args for use later\n    argsToUse = args;\n    if (!ticking) {\n      ticking = true;\n      requestAnimFrame.call(window, () => {\n        ticking = false;\n        fn.apply(thisArg, argsToUse);\n      });\n    }\n  };\n}\n\n/**\n * Debounces calling `fn` for `delay` ms\n */\nexport function debounce<TArgs extends Array<any>>(fn: (...args: TArgs) => void, delay: number) {\n  let timeout;\n  return function(...args: TArgs) {\n    if (delay) {\n      clearTimeout(timeout);\n      timeout = setTimeout(fn, delay, args);\n    } else {\n      fn.apply(this, args);\n    }\n    return delay;\n  };\n}\n\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */\nexport const _toLeftRightCenter = (align: 'start' | 'end' | 'center') => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */\nexport const _alignStartEnd = (align: 'start' | 'end' | 'center', start: number, end: number) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */\nexport const _textX = (align: 'left' | 'right' | 'center', left: number, right: number, rtl: boolean) => {\n  const check = rtl ? 'left' : 'right';\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n\n/**\n * Return start and count of visible points.\n * @private\n */\nexport function _getStartAndCountOfVisiblePoints(meta: ChartMeta<'line' | 'scatter'>, points: PointElement[], animationsDisabled: boolean) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count = pointCount;\n\n  if (meta._sorted) {\n    const {iScale, _parsed} = meta;\n    const axis = iScale.axis;\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n    if (minDefined) {\n      start = _limitValue(Math.min(\n        // @ts-expect-error Need to type _parsed\n        _lookupByKey(_parsed, axis, min).lo,\n        // @ts-expect-error Need to fix types on _lookupByKey\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\n      0, pointCount - 1);\n    }\n    if (maxDefined) {\n      count = _limitValue(Math.max(\n        // @ts-expect-error Need to type _parsed\n        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,\n        // @ts-expect-error Need to fix types on _lookupByKey\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1),\n      start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n  }\n\n  return {start, count};\n}\n\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */\nexport function _scaleRangesChanged(meta) {\n  const {xScale, yScale, _scaleRanges} = meta;\n  const newRanges = {\n    xmin: xScale.min,\n    xmax: xScale.max,\n    ymin: yScale.min,\n    ymax: yScale.max\n  };\n  if (!_scaleRanges) {\n    meta._scaleRanges = newRanges;\n    return true;\n  }\n  const changed = _scaleRanges.xmin !== xScale.min\n\t\t|| _scaleRanges.xmax !== xScale.max\n\t\t|| _scaleRanges.ymin !== yScale.min\n\t\t|| _scaleRanges.ymax !== yScale.max;\n\n  Object.assign(_scaleRanges, newRanges);\n  return changed;\n}\n", "import {PI, TAU, HALF_PI} from './helpers.math.js';\n\nconst atEdge = (t: number) => t === 0 || t === 1;\nconst elasticIn = (t: number, s: number, p: number) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t: number, s: number, p: number) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */\nconst effects = {\n  linear: (t: number) => t,\n\n  easeInQuad: (t: number) => t * t,\n\n  easeOutQuad: (t: number) => -t * (t - 2),\n\n  easeInOutQuad: (t: number) => ((t /= 0.5) < 1)\n    ? 0.5 * t * t\n    : -0.5 * ((--t) * (t - 2) - 1),\n\n  easeInCubic: (t: number) => t * t * t,\n\n  easeOutCubic: (t: number) => (t -= 1) * t * t + 1,\n\n  easeInOutCubic: (t: number) => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t\n    : 0.5 * ((t -= 2) * t * t + 2),\n\n  easeInQuart: (t: number) => t * t * t * t,\n\n  easeOutQuart: (t: number) => -((t -= 1) * t * t * t - 1),\n\n  easeInOutQuart: (t: number) => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t\n    : -0.5 * ((t -= 2) * t * t * t - 2),\n\n  easeInQuint: (t: number) => t * t * t * t * t,\n\n  easeOutQuint: (t: number) => (t -= 1) * t * t * t * t + 1,\n\n  easeInOutQuint: (t: number) => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t * t\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\n\n  easeInSine: (t: number) => -Math.cos(t * HALF_PI) + 1,\n\n  easeOutSine: (t: number) => Math.sin(t * HALF_PI),\n\n  easeInOutSine: (t: number) => -0.5 * (Math.cos(PI * t) - 1),\n\n  easeInExpo: (t: number) => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\n\n  easeOutExpo: (t: number) => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\n\n  easeInOutExpo: (t: number) => atEdge(t) ? t : t < 0.5\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n\n  easeInCirc: (t: number) => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\n\n  easeOutCirc: (t: number) => Math.sqrt(1 - (t -= 1) * t),\n\n  easeInOutCirc: (t: number) => ((t /= 0.5) < 1)\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n\n  easeInElastic: (t: number) => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n\n  easeOutElastic: (t: number) => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n\n  easeInOutElastic(t: number) {\n    const s = 0.1125;\n    const p = 0.45;\n    return atEdge(t) ? t :\n      t < 0.5\n        ? 0.5 * elasticIn(t * 2, s, p)\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n  },\n\n  easeInBack(t: number) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n  },\n\n  easeOutBack(t: number) {\n    const s = 1.70158;\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n  },\n\n  easeInOutBack(t: number) {\n    let s = 1.70158;\n    if ((t /= 0.5) < 1) {\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n    }\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n  },\n\n  easeInBounce: (t: number) => 1 - effects.easeOutBounce(1 - t),\n\n  easeOutBounce(t: number) {\n    const m = 7.5625;\n    const d = 2.75;\n    if (t < (1 / d)) {\n      return m * t * t;\n    }\n    if (t < (2 / d)) {\n      return m * (t -= (1.5 / d)) * t + 0.75;\n    }\n    if (t < (2.5 / d)) {\n      return m * (t -= (2.25 / d)) * t + 0.9375;\n    }\n    return m * (t -= (2.625 / d)) * t + 0.984375;\n  },\n\n  easeInOutBounce: (t: number) => (t < 0.5)\n    ? effects.easeInBounce(t * 2) * 0.5\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\n} as const;\n\nexport type EasingFunction = keyof typeof effects\n\nexport default effects;\n", "import {Color} from '@kurkle/color';\n\nexport function isPatternOrGradient(value: unknown): value is CanvasPattern | CanvasGradient {\n  if (value && typeof value === 'object') {\n    const type = value.toString();\n    return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n  }\n\n  return false;\n}\n\nexport function color(value: CanvasGradient): CanvasGradient;\nexport function color(value: CanvasPattern): CanvasPattern;\nexport function color(\n  value:\n  | string\n  | { r: number; g: number; b: number; a: number }\n  | [number, number, number]\n  | [number, number, number, number]\n): Color;\nexport function color(value) {\n  return isPatternOrGradient(value) ? value : new Color(value);\n}\n\nexport function getHoverColor(value: CanvasGradient): CanvasGradient;\nexport function getHoverColor(value: CanvasPattern): CanvasPattern;\nexport function getHoverColor(value: string): string;\nexport function getHoverColor(value) {\n  return isPatternOrGradient(value)\n    ? value\n    : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n", "const numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nconst colors = ['color', 'borderColor', 'backgroundColor'];\n\nexport function applyAnimationsDefaults(defaults) {\n  defaults.set('animation', {\n    delay: undefined,\n    duration: 1000,\n    easing: 'easeOutQuart',\n    fn: undefined,\n    from: undefined,\n    loop: undefined,\n    to: undefined,\n    type: undefined,\n  });\n\n  defaults.describe('animation', {\n    _fallback: false,\n    _indexable: false,\n    _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\n  });\n\n  defaults.set('animations', {\n    colors: {\n      type: 'color',\n      properties: colors\n    },\n    numbers: {\n      type: 'number',\n      properties: numbers\n    },\n  });\n\n  defaults.describe('animations', {\n    _fallback: 'animation',\n  });\n\n  defaults.set('transitions', {\n    active: {\n      animation: {\n        duration: 400\n      }\n    },\n    resize: {\n      animation: {\n        duration: 0\n      }\n    },\n    show: {\n      animations: {\n        colors: {\n          from: 'transparent'\n        },\n        visible: {\n          type: 'boolean',\n          duration: 0 // show immediately\n        },\n      }\n    },\n    hide: {\n      animations: {\n        colors: {\n          to: 'transparent'\n        },\n        visible: {\n          type: 'boolean',\n          easing: 'linear',\n          fn: v => v | 0 // for keeping the dataset visible all the way through the animation\n        },\n      }\n    }\n  });\n}\n", "export function applyLayoutsDefaults(defaults) {\n  defaults.set('layout', {\n    autoPadding: true,\n    padding: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  });\n}\n", "\nconst intlCache = new Map<string, Intl.NumberFormat>();\n\nfunction getNumberFormat(locale: string, options?: Intl.NumberFormatOptions) {\n  options = options || {};\n  const cacheKey = locale + JSON.stringify(options);\n  let formatter = intlCache.get(cacheKey);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(locale, options);\n    intlCache.set(cacheKey, formatter);\n  }\n  return formatter;\n}\n\nexport function formatNumber(num: number, locale: string, options?: Intl.NumberFormatOptions) {\n  return getNumberFormat(locale, options).format(num);\n}\n", "import {isArray} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {log10} from '../helpers/helpers.math.js';\n\n/**\n * Namespace to hold formatters for different types of ticks\n * @namespace Chart.Ticks.formatters\n */\nconst formatters = {\n  /**\n   * Formatter for value labels\n   * @method Chart.Ticks.formatters.values\n   * @param value the value to display\n   * @return {string|string[]} the label to display\n   */\n  values(value) {\n    return isArray(value) ? /** @type {string[]} */ (value) : '' + value;\n  },\n\n  /**\n   * Formatter for numeric ticks\n   * @method Chart.Ticks.formatters.numeric\n   * @param tickValue {number} the value to be formatted\n   * @param index {number} the position of the tickValue parameter in the ticks array\n   * @param ticks {object[]} the list of ticks being converted\n   * @return {string} string representation of the tickValue parameter\n   */\n  numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0'; // never show decimal places for 0\n    }\n\n    const locale = this.chart.options.locale;\n    let notation;\n    let delta = tickValue; // This is used when there are less than 2 ticks as the tick interval.\n\n    if (ticks.length > 1) {\n      // all ticks are small or there huge numbers; use scientific notation\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n\n      delta = calculateDelta(tickValue, ticks);\n    }\n\n    const logDelta = log10(Math.abs(delta));\n\n    // When datasets have values approaching Number.MAX_VALUE, the tick calculations might result in\n    // infinity and eventually NaN. Passing NaN for minimumFractionDigits or maximumFractionDigits\n    // will make the number formatter throw. So instead we check for isNaN and use a fallback value.\n    //\n    // toFixed has a max of 20 decimal places\n    const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\n    Object.assign(options, this.options.ticks.format);\n\n    return formatNumber(tickValue, locale, options);\n  },\n\n\n  /**\n   * Formatter for logarithmic ticks\n   * @method Chart.Ticks.formatters.logarithmic\n   * @param tickValue {number} the value to be formatted\n   * @param index {number} the position of the tickValue parameter in the ticks array\n   * @param ticks {object[]} the list of ticks being converted\n   * @return {string} string representation of the tickValue parameter\n   */\n  logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const remain = ticks[index].significand || (tickValue / (Math.pow(10, Math.floor(log10(tickValue)))));\n    if ([1, 2, 3, 5, 10, 15].includes(remain) || index > 0.8 * ticks.length) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n    return '';\n  }\n\n};\n\n\nfunction calculateDelta(tickValue, ticks) {\n  // Figure out how many digits to show\n  // The space between the first two ticks might be smaller than normal spacing\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n\n  // If we have a number like 2.5 as the delta, figure out how many decimal places we need\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    // not an integer\n    delta = tickValue - Math.floor(tickValue);\n  }\n  return delta;\n}\n\n/**\n * Namespace to hold static tick generation functions\n * @namespace Chart.Ticks\n */\nexport default {formatters};\n", "import Ticks from './core.ticks.js';\n\nexport function applyScaleDefaults(defaults) {\n  defaults.set('scale', {\n    display: true,\n    offset: false,\n    reverse: false,\n    beginAtZero: false,\n\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 3.0.0\n     */\n    bounds: 'ticks',\n\n    clip: true,\n\n    /**\n     * Addition grace added to max and reduced from min data value.\n     * @since 3.0.0\n     */\n    grace: 0,\n\n    // grid line settings\n    grid: {\n      display: true,\n      lineWidth: 1,\n      drawOnChartArea: true,\n      drawTicks: true,\n      tickLength: 8,\n      tickWidth: (_ctx, options) => options.lineWidth,\n      tickColor: (_ctx, options) => options.color,\n      offset: false,\n    },\n\n    border: {\n      display: true,\n      dash: [],\n      dashOffset: 0.0,\n      width: 1\n    },\n\n    // scale title\n    title: {\n      // display property\n      display: false,\n\n      // actual label\n      text: '',\n\n      // top/bottom padding\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n\n    // label settings\n    ticks: {\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      textStrokeWidth: 0,\n      textStrokeColor: '',\n      padding: 3,\n      display: true,\n      autoSkip: true,\n      autoSkipPadding: 3,\n      labelOffset: 0,\n      // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n      callback: Ticks.formatters.values,\n      minor: {},\n      major: {},\n      align: 'center',\n      crossAlign: 'near',\n\n      showLabelBackdrop: false,\n      backdropColor: 'rgba(255, 255, 255, 0.75)',\n      backdropPadding: 2,\n    }\n  });\n\n  defaults.route('scale.ticks', 'color', '', 'color');\n  defaults.route('scale.grid', 'color', '', 'borderColor');\n  defaults.route('scale.border', 'color', '', 'borderColor');\n  defaults.route('scale.title', 'color', '', 'color');\n\n  defaults.describe('scale', {\n    _fallback: false,\n    _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n    _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash',\n  });\n\n  defaults.describe('scales', {\n    _fallback: 'scale',\n  });\n\n  defaults.describe('scale.ticks', {\n    _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\n    _indexable: (name) => name !== 'backdropPadding',\n  });\n}\n", "import {getHoverColor} from '../helpers/helpers.color.js';\nimport {isObject, merge, valueOrDefault} from '../helpers/helpers.core.js';\nimport {applyAnimationsDefaults} from './core.animations.defaults.js';\nimport {applyLayoutsDefaults} from './core.layouts.defaults.js';\nimport {applyScaleDefaults} from './core.scale.defaults.js';\n\nexport const overrides = Object.create(null);\nexport const descriptors = Object.create(null);\n\n/**\n * @param {object} node\n * @param {string} key\n * @return {object}\n */\nfunction getScope(node, key) {\n  if (!key) {\n    return node;\n  }\n  const keys = key.split('.');\n  for (let i = 0, n = keys.length; i < n; ++i) {\n    const k = keys[i];\n    node = node[k] || (node[k] = Object.create(null));\n  }\n  return node;\n}\n\nfunction set(root, scope, values) {\n  if (typeof scope === 'string') {\n    return merge(getScope(root, scope), values);\n  }\n  return merge(getScope(root, ''), scope);\n}\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Defaults {\n  constructor(_descriptors, _appliers) {\n    this.animation = undefined;\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\n    this.borderColor = 'rgba(0,0,0,0.1)';\n    this.color = '#666';\n    this.datasets = {};\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\n    this.elements = {};\n    this.events = [\n      'mousemove',\n      'mouseout',\n      'click',\n      'touchstart',\n      'touchmove'\n    ];\n    this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: 'normal',\n      lineHeight: 1.2,\n      weight: null\n    };\n    this.hover = {};\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\n    this.indexAxis = 'x';\n    this.interaction = {\n      mode: 'nearest',\n      intersect: true,\n      includeInvisible: false\n    };\n    this.maintainAspectRatio = true;\n    this.onHover = null;\n    this.onClick = null;\n    this.parsing = true;\n    this.plugins = {};\n    this.responsive = true;\n    this.scale = undefined;\n    this.scales = {};\n    this.showLine = true;\n    this.drawActiveElementsOnTop = true;\n\n    this.describe(_descriptors);\n    this.apply(_appliers);\n  }\n\n  /**\n\t * @param {string|object} scope\n\t * @param {object} [values]\n\t */\n  set(scope, values) {\n    return set(this, scope, values);\n  }\n\n  /**\n\t * @param {string} scope\n\t */\n  get(scope) {\n    return getScope(this, scope);\n  }\n\n  /**\n\t * @param {string|object} scope\n\t * @param {object} [values]\n\t */\n  describe(scope, values) {\n    return set(descriptors, scope, values);\n  }\n\n  override(scope, values) {\n    return set(overrides, scope, values);\n  }\n\n  /**\n\t * Routes the named defaults to fallback to another scope/name.\n\t * This routing is useful when those target values, like defaults.color, are changed runtime.\n\t * If the values would be copied, the runtime change would not take effect. By routing, the\n\t * fallback is evaluated at each access, so its always up to date.\n\t *\n\t * Example:\n\t *\n\t * \tdefaults.route('elements.arc', 'backgroundColor', '', 'color')\n\t *   - reads the backgroundColor from defaults.color when undefined locally\n\t *\n\t * @param {string} scope Scope this route applies to.\n\t * @param {string} name Property name that should be routed to different namespace when not defined here.\n\t * @param {string} targetScope The namespace where those properties should be routed to.\n\t * Empty string ('') is the root of defaults.\n\t * @param {string} targetName The target name in the target scope the property should be routed to.\n\t */\n  route(scope, name, targetScope, targetName) {\n    const scopeObject = getScope(this, scope);\n    const targetScopeObject = getScope(this, targetScope);\n    const privateName = '_' + name;\n\n    Object.defineProperties(scopeObject, {\n      // A private property is defined to hold the actual value, when this property is set in its scope (set in the setter)\n      [privateName]: {\n        value: scopeObject[name],\n        writable: true\n      },\n      // The actual property is defined as getter/setter so we can do the routing when value is not locally set.\n      [name]: {\n        enumerable: true,\n        get() {\n          const local = this[privateName];\n          const target = targetScopeObject[targetName];\n          if (isObject(local)) {\n            return Object.assign({}, target, local);\n          }\n          return valueOrDefault(local, target);\n        },\n        set(value) {\n          this[privateName] = value;\n        }\n      }\n    });\n  }\n\n  apply(appliers) {\n    appliers.forEach((apply) => apply(this));\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Defaults({\n  _scriptable: (name) => !name.startsWith('on'),\n  _indexable: (name) => name !== 'events',\n  hover: {\n    _fallback: 'interaction'\n  },\n  interaction: {\n    _scriptable: false,\n    _indexable: false,\n  }\n}, [applyAnimationsDefaults, applyLayoutsDefaults, applyScaleDefaults]);\n", "import type {\n  Chart,\n  Point,\n  FontSpec,\n  CanvasFontSpec,\n  PointStyle,\n  RenderTextOpts,\n  BackdropOptions\n} from '../types/index.js';\nimport type {\n  TRBL,\n  SplinePoint,\n  RoundedRect,\n  TRBLCorners\n} from '../types/geometric.js';\nimport {isArray, isNullOrUndef} from './helpers.core.js';\nimport {PI, TAU, HALF_PI, QUARTER_PI, TWO_THIRDS_PI, RAD_PER_DEG} from './helpers.math.js';\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */\nexport function toFontString(font: FontSpec) {\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n    return null;\n  }\n\n  return (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\n\n/**\n * @private\n */\nexport function _measureText(\n  ctx: CanvasRenderingContext2D,\n  data: Record<string, number>,\n  gc: string[],\n  longest: number,\n  string: string\n) {\n  let textWidth = data[string];\n  if (!textWidth) {\n    textWidth = data[string] = ctx.measureText(string).width;\n    gc.push(string);\n  }\n  if (textWidth > longest) {\n    longest = textWidth;\n  }\n  return longest;\n}\n\ntype Thing = string | undefined | null\ntype Things = (Thing | Thing[])[]\n\n/**\n * @private\n */\n// eslint-disable-next-line complexity\nexport function _longestText(\n  ctx: CanvasRenderingContext2D,\n  font: string,\n  arrayOfThings: Things,\n  cache?: {data?: Record<string, number>, garbageCollect?: string[], font?: string}\n) {\n  cache = cache || {};\n  let data = cache.data = cache.data || {};\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\n\n  if (cache.font !== font) {\n    data = cache.data = {};\n    gc = cache.garbageCollect = [];\n    cache.font = font;\n  }\n\n  ctx.save();\n\n  ctx.font = font;\n  let longest = 0;\n  const ilen = arrayOfThings.length;\n  let i: number, j: number, jlen: number, thing: Thing | Thing[], nestedThing: Thing | Thing[];\n  for (i = 0; i < ilen; i++) {\n    thing = arrayOfThings[i];\n\n    // Undefined strings and arrays should not be measured\n    if (thing !== undefined && thing !== null && !isArray(thing)) {\n      longest = _measureText(ctx, data, gc, longest, thing);\n    } else if (isArray(thing)) {\n      // if it is an array lets measure each element\n      // to do maybe simplify this function a bit so we can do this more recursively?\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\n        nestedThing = thing[j];\n        // Undefined strings and arrays should not be measured\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\n        }\n      }\n    }\n  }\n\n  ctx.restore();\n\n  const gcLen = gc.length / 2;\n  if (gcLen > arrayOfThings.length) {\n    for (i = 0; i < gcLen; i++) {\n      delete data[gc[i]];\n    }\n    gc.splice(0, gcLen);\n  }\n  return longest;\n}\n\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */\nexport function _alignPixel(chart: Chart, pixel: number, width: number) {\n  const devicePixelRatio = chart.currentDevicePixelRatio;\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n\n/**\n * Clears the entire canvas.\n */\nexport function clearCanvas(canvas?: HTMLCanvasElement, ctx?: CanvasRenderingContext2D) {\n  if (!ctx && !canvas) {\n    return;\n  }\n\n  ctx = ctx || canvas.getContext('2d');\n\n  ctx.save();\n  // canvas.width and canvas.height do not consider the canvas transform,\n  // while clearRect does\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n}\n\nexport interface DrawPointOptions {\n  pointStyle: PointStyle;\n  rotation?: number;\n  radius: number;\n  borderWidth: number;\n}\n\nexport function drawPoint(\n  ctx: CanvasRenderingContext2D,\n  options: DrawPointOptions,\n  x: number,\n  y: number\n) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  drawPointLegend(ctx, options, x, y, null);\n}\n\n// eslint-disable-next-line complexity\nexport function drawPointLegend(\n  ctx: CanvasRenderingContext2D,\n  options: DrawPointOptions,\n  x: number,\n  y: number,\n  w: number\n) {\n  let type: string, xOffset: number, yOffset: number, size: number, cornerRadius: number, width: number, xOffsetW: number, yOffsetW: number;\n  const style = options.pointStyle;\n  const rotation = options.rotation;\n  const radius = options.radius;\n  let rad = (rotation || 0) * RAD_PER_DEG;\n\n  if (style && typeof style === 'object') {\n    type = style.toString();\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(rad);\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n      ctx.restore();\n      return;\n    }\n  }\n\n  if (isNaN(radius) || radius <= 0) {\n    return;\n  }\n\n  ctx.beginPath();\n\n  switch (style) {\n  // Default includes circle\n    default:\n      if (w) {\n        ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n      } else {\n        ctx.arc(x, y, radius, 0, TAU);\n      }\n      ctx.closePath();\n      break;\n    case 'triangle':\n      width = w ? w / 2 : radius;\n      ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n      rad += TWO_THIRDS_PI;\n      ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n      rad += TWO_THIRDS_PI;\n      ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n      ctx.closePath();\n      break;\n    case 'rectRounded':\n    // NOTE: the rounded rect implementation changed to use `arc` instead of\n    // `quadraticCurveTo` since it generates better results when rect is\n    // almost a circle. 0.516 (instead of 0.5) produces results with visually\n    // closer proportion to the previous impl and it is inscribed in the\n    // circle with `radius`. For more details, see the following PRs:\n    // https://github.com/chartjs/Chart.js/issues/5597\n    // https://github.com/chartjs/Chart.js/issues/5858\n      cornerRadius = radius * 0.516;\n      size = radius - cornerRadius;\n      xOffset = Math.cos(rad + QUARTER_PI) * size;\n      xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n      yOffset = Math.sin(rad + QUARTER_PI) * size;\n      yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n      ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n      ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n      ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n      ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n      ctx.closePath();\n      break;\n    case 'rect':\n      if (!rotation) {\n        size = Math.SQRT1_2 * radius;\n        width = w ? w / 2 : size;\n        ctx.rect(x - width, y - size, 2 * width, 2 * size);\n        break;\n      }\n      rad += QUARTER_PI;\n    /* falls through */\n    case 'rectRot':\n      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n      ctx.moveTo(x - xOffsetW, y - yOffset);\n      ctx.lineTo(x + yOffsetW, y - xOffset);\n      ctx.lineTo(x + xOffsetW, y + yOffset);\n      ctx.lineTo(x - yOffsetW, y + xOffset);\n      ctx.closePath();\n      break;\n    case 'crossRot':\n      rad += QUARTER_PI;\n    /* falls through */\n    case 'cross':\n      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n      ctx.moveTo(x - xOffsetW, y - yOffset);\n      ctx.lineTo(x + xOffsetW, y + yOffset);\n      ctx.moveTo(x + yOffsetW, y - xOffset);\n      ctx.lineTo(x - yOffsetW, y + xOffset);\n      break;\n    case 'star':\n      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n      ctx.moveTo(x - xOffsetW, y - yOffset);\n      ctx.lineTo(x + xOffsetW, y + yOffset);\n      ctx.moveTo(x + yOffsetW, y - xOffset);\n      ctx.lineTo(x - yOffsetW, y + xOffset);\n      rad += QUARTER_PI;\n      xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n      xOffset = Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n      ctx.moveTo(x - xOffsetW, y - yOffset);\n      ctx.lineTo(x + xOffsetW, y + yOffset);\n      ctx.moveTo(x + yOffsetW, y - xOffset);\n      ctx.lineTo(x - yOffsetW, y + xOffset);\n      break;\n    case 'line':\n      xOffset = w ? w / 2 : Math.cos(rad) * radius;\n      yOffset = Math.sin(rad) * radius;\n      ctx.moveTo(x - xOffset, y - yOffset);\n      ctx.lineTo(x + xOffset, y + yOffset);\n      break;\n    case 'dash':\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n      break;\n    case false:\n      ctx.closePath();\n      break;\n  }\n\n  ctx.fill();\n  if (options.borderWidth > 0) {\n    ctx.stroke();\n  }\n}\n\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */\nexport function _isPointInArea(\n  point: Point,\n  area: TRBL,\n  margin?: number\n) {\n  margin = margin || 0.5; // margin - default is to match rounded decimals\n\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\n}\n\nexport function clipArea(ctx: CanvasRenderingContext2D, area: TRBL) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n  ctx.clip();\n}\n\nexport function unclipArea(ctx: CanvasRenderingContext2D) {\n  ctx.restore();\n}\n\n/**\n * @private\n */\nexport function _steppedLineTo(\n  ctx: CanvasRenderingContext2D,\n  previous: Point,\n  target: Point,\n  flip?: boolean,\n  mode?: string\n) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  if (mode === 'middle') {\n    const midpoint = (previous.x + target.x) / 2.0;\n    ctx.lineTo(midpoint, previous.y);\n    ctx.lineTo(midpoint, target.y);\n  } else if (mode === 'after' !== !!flip) {\n    ctx.lineTo(previous.x, target.y);\n  } else {\n    ctx.lineTo(target.x, previous.y);\n  }\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @private\n */\nexport function _bezierCurveTo(\n  ctx: CanvasRenderingContext2D,\n  previous: SplinePoint,\n  target: SplinePoint,\n  flip?: boolean\n) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  ctx.bezierCurveTo(\n    flip ? previous.cp1x : previous.cp2x,\n    flip ? previous.cp1y : previous.cp2y,\n    flip ? target.cp2x : target.cp1x,\n    flip ? target.cp2y : target.cp1y,\n    target.x,\n    target.y);\n}\n\nfunction setRenderOpts(ctx: CanvasRenderingContext2D, opts: RenderTextOpts) {\n  if (opts.translation) {\n    ctx.translate(opts.translation[0], opts.translation[1]);\n  }\n\n  if (!isNullOrUndef(opts.rotation)) {\n    ctx.rotate(opts.rotation);\n  }\n\n  if (opts.color) {\n    ctx.fillStyle = opts.color;\n  }\n\n  if (opts.textAlign) {\n    ctx.textAlign = opts.textAlign;\n  }\n\n  if (opts.textBaseline) {\n    ctx.textBaseline = opts.textBaseline;\n  }\n}\n\nfunction decorateText(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  line: string,\n  opts: RenderTextOpts\n) {\n  if (opts.strikethrough || opts.underline) {\n    /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */\n    const metrics = ctx.measureText(line);\n    const left = x - metrics.actualBoundingBoxLeft;\n    const right = x + metrics.actualBoundingBoxRight;\n    const top = y - metrics.actualBoundingBoxAscent;\n    const bottom = y + metrics.actualBoundingBoxDescent;\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.beginPath();\n    ctx.lineWidth = opts.decorationWidth || 2;\n    ctx.moveTo(left, yDecoration);\n    ctx.lineTo(right, yDecoration);\n    ctx.stroke();\n  }\n}\n\nfunction drawBackdrop(ctx: CanvasRenderingContext2D, opts: BackdropOptions) {\n  const oldColor = ctx.fillStyle;\n\n  ctx.fillStyle = opts.color as string;\n  ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n  ctx.fillStyle = oldColor;\n}\n\n/**\n * Render text onto the canvas\n */\nexport function renderText(\n  ctx: CanvasRenderingContext2D,\n  text: string | string[],\n  x: number,\n  y: number,\n  font: CanvasFontSpec,\n  opts: RenderTextOpts = {}\n) {\n  const lines = isArray(text) ? text : [text];\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n  let i: number, line: string;\n\n  ctx.save();\n  ctx.font = font.string;\n  setRenderOpts(ctx, opts);\n\n  for (i = 0; i < lines.length; ++i) {\n    line = lines[i];\n\n    if (opts.backdrop) {\n      drawBackdrop(ctx, opts.backdrop);\n    }\n\n    if (stroke) {\n      if (opts.strokeColor) {\n        ctx.strokeStyle = opts.strokeColor;\n      }\n\n      if (!isNullOrUndef(opts.strokeWidth)) {\n        ctx.lineWidth = opts.strokeWidth;\n      }\n\n      ctx.strokeText(line, x, y, opts.maxWidth);\n    }\n\n    ctx.fillText(line, x, y, opts.maxWidth);\n    decorateText(ctx, x, y, line, opts);\n\n    y += Number(font.lineHeight);\n  }\n\n  ctx.restore();\n}\n\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */\nexport function addRoundedRectPath(\n  ctx: CanvasRenderingContext2D,\n  rect: RoundedRect & { radius: TRBLCorners }\n) {\n  const {x, y, w, h, radius} = rect;\n\n  // top left arc\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n\n  // line from top left to bottom left\n  ctx.lineTo(x, y + h - radius.bottomLeft);\n\n  // bottom left arc\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n\n  // line from bottom left to bottom right\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\n\n  // bottom right arc\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n\n  // line from bottom right to top right\n  ctx.lineTo(x + w, y + radius.topRight);\n\n  // top right arc\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n\n  // line from top right to top left\n  ctx.lineTo(x + radius.topLeft, y);\n}\n", "import defaults from '../core/core.defaults.js';\nimport {isArray, isObject, toDimension, valueOrDefault} from './helpers.core.js';\nimport {toFontString} from './helpers.canvas.js';\nimport type {ChartArea, FontSpec, Point} from '../types/index.js';\nimport type {TRBL, TRBLCorners} from '../types/geometric.js';\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n\n/**\n * @alias Chart.helpers.options\n * @namespace\n */\n/**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */\nexport function toLineHeight(value: number | string, size: number): number {\n  const matches = ('' + value).match(LINE_HEIGHT);\n  if (!matches || matches[1] === 'normal') {\n    return size * 1.2;\n  }\n\n  value = +matches[2];\n\n  switch (matches[3]) {\n    case 'px':\n      return value;\n    case '%':\n      value /= 100;\n      break;\n    default:\n      break;\n  }\n\n  return size * value;\n}\n\nconst numberOrZero = (v: unknown) => +v || 0;\n\n/**\n * @param value\n * @param props\n */\nexport function _readValueToProps<K extends string>(value: number | Record<K, number>, props: K[]): Record<K, number>;\nexport function _readValueToProps<K extends string, T extends string>(value: number | Record<K & T, number>, props: Record<T, K>): Record<T, number>;\nexport function _readValueToProps(value: number | Record<string, number>, props: string[] | Record<string, string>) {\n  const ret = {};\n  const objProps = isObject(props);\n  const keys = objProps ? Object.keys(props) : props;\n  const read = isObject(value)\n    ? objProps\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\n      : prop => value[prop]\n    : () => value;\n\n  for (const prop of keys) {\n    ret[prop] = numberOrZero(read(prop));\n  }\n  return ret;\n}\n\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */\nexport function toTRBL(value: number | TRBL | Point) {\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\n}\n\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */\nexport function toTRBLCorners(value: number | TRBLCorners) {\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n}\n\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */\nexport function toPadding(value?: number | TRBL): ChartArea {\n  const obj = toTRBL(value) as ChartArea;\n\n  obj.width = obj.left + obj.right;\n  obj.height = obj.top + obj.bottom;\n\n  return obj;\n}\n\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */\n\nexport function toFont(options: Partial<FontSpec>, fallback?: Partial<FontSpec>) {\n  options = options || {};\n  fallback = fallback || defaults.font as FontSpec;\n\n  let size = valueOrDefault(options.size, fallback.size);\n\n  if (typeof size === 'string') {\n    size = parseInt(size, 10);\n  }\n  let style = valueOrDefault(options.style, fallback.style);\n  if (style && !('' + style).match(FONT_STYLE)) {\n    console.warn('Invalid font style specified: \"' + style + '\"');\n    style = undefined;\n  }\n\n  const font = {\n    family: valueOrDefault(options.family, fallback.family),\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n    size,\n    style,\n    weight: valueOrDefault(options.weight, fallback.weight),\n    string: ''\n  };\n\n  font.string = toFontString(font);\n  return font;\n}\n\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */\nexport function resolve(inputs: Array<unknown>, context?: object, index?: number, info?: { cacheable: boolean }) {\n  let cacheable = true;\n  let i: number, ilen: number, value: unknown;\n\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n    value = inputs[i];\n    if (value === undefined) {\n      continue;\n    }\n    if (context !== undefined && typeof value === 'function') {\n      value = value(context);\n      cacheable = false;\n    }\n    if (index !== undefined && isArray(value)) {\n      value = value[index % value.length];\n      cacheable = false;\n    }\n    if (value !== undefined) {\n      if (info && !cacheable) {\n        info.cacheable = false;\n      }\n      return value;\n    }\n  }\n}\n\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */\nexport function _addGrace(minmax: { min: number; max: number; }, grace: number | string, beginAtZero: boolean) {\n  const {min, max} = minmax;\n  const change = toDimension(grace, (max - min) / 2);\n  const keepZero = (value: number, add: number) => beginAtZero && value === 0 ? 0 : value + add;\n  return {\n    min: keepZero(min, -Math.abs(change)),\n    max: keepZero(max, change)\n  };\n}\n\n/**\n * Create a context inheriting parentContext\n * @param parentContext\n * @param context\n * @returns\n */\nexport function createContext<T extends object>(parentContext: null, context: T): T;\nexport function createContext<T extends object, P extends T>(parentContext: P, context: T): P & T;\nexport function createContext(parentContext: object, context: object) {\n  return Object.assign(Object.create(parentContext), context);\n}\n", "/* eslint-disable @typescript-eslint/no-use-before-define */\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartMeta} from '../types/index.js';\nimport type {\n  ResolverObjectKey,\n  ResolverCache,\n  ResolverProxy,\n  DescriptorDefaults,\n  Descriptor,\n  ContextCache,\n  ContextProxy\n} from './helpers.config.types.js';\nimport {isArray, isFunction, isObject, resolveObjectKey, _capitalize} from './helpers.core.js';\n\nexport * from './helpers.config.types.js';\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */\nexport function _createResolver<\n  T extends AnyObject[] = AnyObject[],\n  R extends AnyObject[] = T\n>(\n  scopes: T,\n  prefixes = [''],\n  rootScopes?: R,\n  fallback?: ResolverObjectKey,\n  getTarget = () => scopes[0]\n) {\n  const finalRootScopes = rootScopes || scopes;\n  if (typeof fallback === 'undefined') {\n    fallback = _resolve('_fallback', scopes);\n  }\n  const cache: ResolverCache<T, R> = {\n    [Symbol.toStringTag]: 'Object',\n    _cacheable: true,\n    _scopes: scopes,\n    _rootScopes: finalRootScopes,\n    _fallback: fallback,\n    _getTarget: getTarget,\n    override: (scope: AnyObject) => _createResolver([scope, ...scopes], prefixes, finalRootScopes, fallback),\n  };\n  return new Proxy(cache, {\n    /**\n     * A trap for the delete operator.\n     */\n    deleteProperty(target, prop: string) {\n      delete target[prop]; // remove from cache\n      delete target._keys; // remove cached keys\n      delete scopes[0][prop]; // remove from top level scope\n      return true;\n    },\n\n    /**\n     * A trap for getting property values.\n     */\n    get(target, prop: string) {\n      return _cached(target, prop,\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n    },\n\n    /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */\n    getOwnPropertyDescriptor(target, prop) {\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n    },\n\n    /**\n     * A trap for Object.getPrototypeOf.\n     */\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(scopes[0]);\n    },\n\n    /**\n     * A trap for the in operator.\n     */\n    has(target, prop: string) {\n      return getKeysFromAllScopes(target).includes(prop);\n    },\n\n    /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */\n    ownKeys(target) {\n      return getKeysFromAllScopes(target);\n    },\n\n    /**\n     * A trap for setting property values.\n     */\n    set(target, prop: string, value) {\n      const storage = target._storage || (target._storage = getTarget());\n      target[prop] = storage[prop] = value; // set to top level scope + cache\n      delete target._keys; // remove cached keys\n      return true;\n    }\n  }) as ResolverProxy<T, R>;\n}\n\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */\nexport function _attachContext<\n  T extends AnyObject[] = AnyObject[],\n  R extends AnyObject[] = T\n>(\n  proxy: ResolverProxy<T, R>,\n  context: AnyObject,\n  subProxy?: ResolverProxy<T, R>,\n  descriptorDefaults?: DescriptorDefaults\n) {\n  const cache: ContextCache<T, R> = {\n    _cacheable: false,\n    _proxy: proxy,\n    _context: context,\n    _subProxy: subProxy,\n    _stack: new Set(),\n    _descriptors: _descriptors(proxy, descriptorDefaults),\n    setContext: (ctx: AnyObject) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n    override: (scope: AnyObject) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n  };\n  return new Proxy(cache, {\n    /**\n     * A trap for the delete operator.\n     */\n    deleteProperty(target, prop) {\n      delete target[prop]; // remove from cache\n      delete proxy[prop]; // remove from proxy\n      return true;\n    },\n\n    /**\n     * A trap for getting property values.\n     */\n    get(target, prop: string, receiver) {\n      return _cached(target, prop,\n        () => _resolveWithContext(target, prop, receiver));\n    },\n\n    /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */\n    getOwnPropertyDescriptor(target, prop) {\n      return target._descriptors.allKeys\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\n    },\n\n    /**\n     * A trap for Object.getPrototypeOf.\n     */\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(proxy);\n    },\n\n    /**\n     * A trap for the in operator.\n     */\n    has(target, prop) {\n      return Reflect.has(proxy, prop);\n    },\n\n    /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */\n    ownKeys() {\n      return Reflect.ownKeys(proxy);\n    },\n\n    /**\n     * A trap for setting property values.\n     */\n    set(target, prop, value) {\n      proxy[prop] = value; // set to proxy\n      delete target[prop]; // remove from cache\n      return true;\n    }\n  }) as ContextProxy<T, R>;\n}\n\n/**\n * @private\n */\nexport function _descriptors(\n  proxy: ResolverCache,\n  defaults: DescriptorDefaults = {scriptable: true, indexable: true}\n): Descriptor {\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\n  return {\n    allKeys: _allKeys,\n    scriptable: _scriptable,\n    indexable: _indexable,\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n  };\n}\n\nconst readKey = (prefix: string, name: string) => prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop: string, value: unknown) => isObject(value) && prop !== 'adapters' &&\n  (Object.getPrototypeOf(value) === null || value.constructor === Object);\n\nfunction _cached(\n  target: AnyObject,\n  prop: string,\n  resolve: () => unknown\n) {\n  if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n    return target[prop];\n  }\n\n  const value = resolve();\n  // cache the resolved value\n  target[prop] = value;\n  return value;\n}\n\nfunction _resolveWithContext(\n  target: ContextCache,\n  prop: string,\n  receiver: AnyObject\n) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  let value = _proxy[prop]; // resolve from proxy\n\n  // resolve with context\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\n    value = _resolveScriptable(prop, value, target, receiver);\n  }\n  if (isArray(value) && value.length) {\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n  }\n  if (needsSubResolver(prop, value)) {\n    // if the resolved value is an object, create a sub resolver for it\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n  }\n  return value;\n}\n\nfunction _resolveScriptable(\n  prop: string,\n  getValue: (ctx: AnyObject, sub: AnyObject) => unknown,\n  target: ContextCache,\n  receiver: AnyObject\n) {\n  const {_proxy, _context, _subProxy, _stack} = target;\n  if (_stack.has(prop)) {\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n  }\n  _stack.add(prop);\n  let value = getValue(_context, _subProxy || receiver);\n  _stack.delete(prop);\n  if (needsSubResolver(prop, value)) {\n    // When scriptable option returns an object, create a resolver on that.\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n  }\n  return value;\n}\n\nfunction _resolveArray(\n  prop: string,\n  value: unknown[],\n  target: ContextCache,\n  isIndexable: (key: string) => boolean\n) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n\n  if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n    return value[_context.index % value.length];\n  } else if (isObject(value[0])) {\n    // Array of objects, return array or resolvers\n    const arr = value;\n    const scopes = _proxy._scopes.filter(s => s !== arr);\n    value = [];\n    for (const item of arr) {\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n    }\n  }\n  return value;\n}\n\nfunction resolveFallback(\n  fallback: ResolverObjectKey | ((prop: ResolverObjectKey, value: unknown) => ResolverObjectKey),\n  prop: ResolverObjectKey,\n  value: unknown\n) {\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\n\nconst getScope = (key: ResolverObjectKey, parent: AnyObject) => key === true ? parent\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\n\nfunction addScopes(\n  set: Set<AnyObject>,\n  parentScopes: AnyObject[],\n  key: ResolverObjectKey,\n  parentFallback: ResolverObjectKey,\n  value: unknown\n) {\n  for (const parent of parentScopes) {\n    const scope = getScope(key, parent);\n    if (scope) {\n      set.add(scope);\n      const fallback = resolveFallback(scope._fallback, key, value);\n      if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n        // When we reach the descriptor that defines a new _fallback, return that.\n        // The fallback will resume to that new scope.\n        return fallback;\n      }\n    } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n      // Fallback to `false` results to `false`, when falling back to different key.\n      // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n      return null;\n    }\n  }\n  return false;\n}\n\nfunction createSubResolver(\n  parentScopes: AnyObject[],\n  resolver: ResolverCache,\n  prop: ResolverObjectKey,\n  value: unknown\n) {\n  const rootScopes = resolver._rootScopes;\n  const fallback = resolveFallback(resolver._fallback, prop, value);\n  const allScopes = [...parentScopes, ...rootScopes];\n  const set = new Set<AnyObject>();\n  set.add(value);\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n  if (key === null) {\n    return false;\n  }\n  if (typeof fallback !== 'undefined' && fallback !== prop) {\n    key = addScopesFromKey(set, allScopes, fallback, key, value);\n    if (key === null) {\n      return false;\n    }\n  }\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\n    () => subGetTarget(resolver, prop as string, value));\n}\n\nfunction addScopesFromKey(\n  set: Set<AnyObject>,\n  allScopes: AnyObject[],\n  key: ResolverObjectKey,\n  fallback: ResolverObjectKey,\n  item: unknown\n) {\n  while (key) {\n    key = addScopes(set, allScopes, key, fallback, item);\n  }\n  return key;\n}\n\nfunction subGetTarget(\n  resolver: ResolverCache,\n  prop: string,\n  value: unknown\n) {\n  const parent = resolver._getTarget();\n  if (!(prop in parent)) {\n    parent[prop] = {};\n  }\n  const target = parent[prop];\n  if (isArray(target) && isObject(value)) {\n    // For array of objects, the object is used to store updated values\n    return value;\n  }\n  return target || {};\n}\n\nfunction _resolveWithPrefixes(\n  prop: string,\n  prefixes: string[],\n  scopes: AnyObject[],\n  proxy: ResolverProxy\n) {\n  let value: unknown;\n  for (const prefix of prefixes) {\n    value = _resolve(readKey(prefix, prop), scopes);\n    if (typeof value !== 'undefined') {\n      return needsSubResolver(prop, value)\n        ? createSubResolver(scopes, proxy, prop, value)\n        : value;\n    }\n  }\n}\n\nfunction _resolve(key: string, scopes: AnyObject[]) {\n  for (const scope of scopes) {\n    if (!scope) {\n      continue;\n    }\n    const value = scope[key];\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n  }\n}\n\nfunction getKeysFromAllScopes(target: ResolverCache) {\n  let keys = target._keys;\n  if (!keys) {\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n  }\n  return keys;\n}\n\nfunction resolveKeysFromAllScopes(scopes: AnyObject[]) {\n  const set = new Set<string>();\n  for (const scope of scopes) {\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\n      set.add(key);\n    }\n  }\n  return Array.from(set);\n}\n\nexport function _parseObjectDataRadialScale(\n  meta: ChartMeta<'line' | 'scatter'>,\n  data: AnyObject[],\n  start: number,\n  count: number\n) {\n  const {iScale} = meta;\n  const {key = 'r'} = this._parsing;\n  const parsed = new Array<{r: unknown}>(count);\n  let i: number, ilen: number, index: number, item: AnyObject;\n\n  for (i = 0, ilen = count; i < ilen; ++i) {\n    index = i + start;\n    item = data[index];\n    parsed[i] = {\n      r: iScale.parse(resolveObjectKey(item, key), index)\n    };\n  }\n  return parsed;\n}\n", "import {almostEquals, distanceBetweenPoints, sign} from './helpers.math.js';\nimport {_isPointInArea} from './helpers.canvas.js';\nimport type {ChartArea} from '../types/index.js';\nimport type {SplinePoint} from '../types/geometric.js';\n\nconst EPSILON = Number.EPSILON || 1e-14;\n\ntype OptionalSplinePoint = SplinePoint | false\nconst getPoint = (points: SplinePoint[], i: number): OptionalSplinePoint => i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis: 'x' | 'y') => indexAxis === 'x' ? 'y' : 'x';\n\nexport function splineCurve(\n  firstPoint: SplinePoint,\n  middlePoint: SplinePoint,\n  afterPoint: SplinePoint,\n  t: number\n): {\n    previous: SplinePoint\n    next: SplinePoint\n  } {\n  // Props to Rob Spencer at scaled innovation for his post on splining between points\n  // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\n  // This function must also respect \"skipped\" points\n\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\n  const current = middlePoint;\n  const next = afterPoint.skip ? middlePoint : afterPoint;\n  const d01 = distanceBetweenPoints(current, previous);\n  const d12 = distanceBetweenPoints(next, current);\n\n  let s01 = d01 / (d01 + d12);\n  let s12 = d12 / (d01 + d12);\n\n  // If all points are the same, s01 & s02 will be inf\n  s01 = isNaN(s01) ? 0 : s01;\n  s12 = isNaN(s12) ? 0 : s12;\n\n  const fa = t * s01; // scaling factor for triangle Ta\n  const fb = t * s12;\n\n  return {\n    previous: {\n      x: current.x - fa * (next.x - previous.x),\n      y: current.y - fa * (next.y - previous.y)\n    },\n    next: {\n      x: current.x + fb * (next.x - previous.x),\n      y: current.y + fb * (next.y - previous.y)\n    }\n  };\n}\n\n/**\n * Adjust tangents to ensure monotonic properties\n */\nfunction monotoneAdjust(points: SplinePoint[], deltaK: number[], mK: number[]) {\n  const pointsLen = points.length;\n\n  let alphaK: number, betaK: number, tauK: number, squaredMagnitude: number, pointCurrent: OptionalSplinePoint;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen - 1; ++i) {\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent || !pointAfter) {\n      continue;\n    }\n\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\n      mK[i] = mK[i + 1] = 0;\n      continue;\n    }\n\n    alphaK = mK[i] / deltaK[i];\n    betaK = mK[i + 1] / deltaK[i];\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n    if (squaredMagnitude <= 9) {\n      continue;\n    }\n\n    tauK = 3 / Math.sqrt(squaredMagnitude);\n    mK[i] = alphaK * tauK * deltaK[i];\n    mK[i + 1] = betaK * tauK * deltaK[i];\n  }\n}\n\nfunction monotoneCompute(points: SplinePoint[], mK: number[], indexAxis: 'x' | 'y' = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  let delta: number, pointBefore: OptionalSplinePoint, pointCurrent: OptionalSplinePoint;\n  let pointAfter = getPoint(points, 0);\n\n  for (let i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n\n    const iPixel = pointCurrent[indexAxis];\n    const vPixel = pointCurrent[valueAxis];\n    if (pointBefore) {\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n    }\n    if (pointAfter) {\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n    }\n  }\n}\n\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */\nexport function splineCurveMonotone(points: SplinePoint[], indexAxis: 'x' | 'y' = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  const deltaK: number[] = Array(pointsLen).fill(0);\n  const mK: number[] = Array(pointsLen);\n\n  // Calculate slopes (deltaK) and initialize tangents (mK)\n  let i, pointBefore: OptionalSplinePoint, pointCurrent: OptionalSplinePoint;\n  let pointAfter = getPoint(points, 0);\n\n  for (i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n\n    if (pointAfter) {\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n\n      // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n    }\n    mK[i] = !pointBefore ? deltaK[i]\n      : !pointAfter ? deltaK[i - 1]\n        : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\n          : (deltaK[i - 1] + deltaK[i]) / 2;\n  }\n\n  monotoneAdjust(points, deltaK, mK);\n\n  monotoneCompute(points, mK, indexAxis);\n}\n\nfunction capControlPoint(pt: number, min: number, max: number) {\n  return Math.max(Math.min(pt, max), min);\n}\n\nfunction capBezierPoints(points: SplinePoint[], area: ChartArea) {\n  let i, ilen, point, inArea, inAreaPrev;\n  let inAreaNext = _isPointInArea(points[0], area);\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\n    inAreaPrev = inArea;\n    inArea = inAreaNext;\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n    if (!inArea) {\n      continue;\n    }\n    point = points[i];\n    if (inAreaPrev) {\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n    }\n    if (inAreaNext) {\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n    }\n  }\n}\n\n/**\n * @private\n */\nexport function _updateBezierControlPoints(\n  points: SplinePoint[],\n  options,\n  area: ChartArea,\n  loop: boolean,\n  indexAxis: 'x' | 'y'\n) {\n  let i: number, ilen: number, point: SplinePoint, controlPoints: ReturnType<typeof splineCurve>;\n\n  // Only consider points that are drawn in case the spanGaps option is used\n  if (options.spanGaps) {\n    points = points.filter((pt) => !pt.skip);\n  }\n\n  if (options.cubicInterpolationMode === 'monotone') {\n    splineCurveMonotone(points, indexAxis);\n  } else {\n    let prev = loop ? points[points.length - 1] : points[0];\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      point = points[i];\n      controlPoints = splineCurve(\n        prev,\n        point,\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\n        options.tension\n      );\n      point.cp1x = controlPoints.previous.x;\n      point.cp1y = controlPoints.previous.y;\n      point.cp2x = controlPoints.next.x;\n      point.cp2y = controlPoints.next.y;\n      prev = point;\n    }\n  }\n\n  if (options.capBezierPoints) {\n    capBezierPoints(points, area);\n  }\n}\n", "import type {ChartArea, Scale} from '../types/index.js';\nimport type Chart from '../core/core.controller.js';\nimport type {ChartEvent} from '../types.js';\nimport {INFINITY} from './helpers.math.js';\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */\n\n/**\n * @private\n */\nexport function _isDomSupported(): boolean {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n\n/**\n * @private\n */\nexport function _getParentNode(domNode: HTMLCanvasElement): HTMLCanvasElement {\n  let parent = domNode.parentNode;\n  if (parent && parent.toString() === '[object ShadowRoot]') {\n    parent = (parent as ShadowRoot).host;\n  }\n  return parent as HTMLCanvasElement;\n}\n\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */\n\nfunction parseMaxStyle(styleValue: string | number, node: HTMLElement, parentProperty: string) {\n  let valueInPixels: number;\n  if (typeof styleValue === 'string') {\n    valueInPixels = parseInt(styleValue, 10);\n\n    if (styleValue.indexOf('%') !== -1) {\n      // percentage * size in dimension\n      valueInPixels = (valueInPixels / 100) * node.parentNode[parentProperty];\n    }\n  } else {\n    valueInPixels = styleValue;\n  }\n\n  return valueInPixels;\n}\n\nconst getComputedStyle = (element: HTMLElement): CSSStyleDeclaration =>\n  element.ownerDocument.defaultView.getComputedStyle(element, null);\n\nexport function getStyle(el: HTMLElement, property: string): string {\n  return getComputedStyle(el).getPropertyValue(property);\n}\n\nconst positions = ['top', 'right', 'bottom', 'left'];\nfunction getPositionedStyle(styles: CSSStyleDeclaration, style: string, suffix?: string): ChartArea {\n  const result = {} as ChartArea;\n  suffix = suffix ? '-' + suffix : '';\n  for (let i = 0; i < 4; i++) {\n    const pos = positions[i];\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n  }\n  result.width = result.left + result.right;\n  result.height = result.top + result.bottom;\n  return result;\n}\n\nconst useOffsetPos = (x: number, y: number, target: HTMLElement | EventTarget) =>\n  (x > 0 || y > 0) && (!target || !(target as HTMLElement).shadowRoot);\n\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */\nfunction getCanvasPosition(\n  e: Event | TouchEvent | MouseEvent,\n  canvas: HTMLCanvasElement\n): {\n    x: number;\n    y: number;\n    box: boolean;\n  } {\n  const touches = (e as TouchEvent).touches;\n  const source = (touches && touches.length ? touches[0] : e) as MouseEvent;\n  const {offsetX, offsetY} = source as MouseEvent;\n  let box = false;\n  let x, y;\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\n    x = offsetX;\n    y = offsetY;\n  } else {\n    const rect = canvas.getBoundingClientRect();\n    x = source.clientX - rect.left;\n    y = source.clientY - rect.top;\n    box = true;\n  }\n  return {x, y, box};\n}\n\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */\n\nexport function getRelativePosition(\n  event: Event | ChartEvent | TouchEvent | MouseEvent,\n  chart: Chart\n): { x: number; y: number } {\n  if ('native' in event) {\n    return event;\n  }\n\n  const {canvas, currentDevicePixelRatio} = chart;\n  const style = getComputedStyle(canvas);\n  const borderBox = style.boxSizing === 'border-box';\n  const paddings = getPositionedStyle(style, 'padding');\n  const borders = getPositionedStyle(style, 'border', 'width');\n  const {x, y, box} = getCanvasPosition(event, canvas);\n  const xOffset = paddings.left + (box && borders.left);\n  const yOffset = paddings.top + (box && borders.top);\n\n  let {width, height} = chart;\n  if (borderBox) {\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  return {\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n  };\n}\n\nfunction getContainerSize(canvas: HTMLCanvasElement, width: number, height: number): Partial<Scale> {\n  let maxWidth: number, maxHeight: number;\n\n  if (width === undefined || height === undefined) {\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    } else {\n      const rect = container.getBoundingClientRect(); // this is the border box of the container\n      const containerStyle = getComputedStyle(container);\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\n      width = rect.width - containerPadding.width - containerBorder.width;\n      height = rect.height - containerPadding.height - containerBorder.height;\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n    }\n  }\n  return {\n    width,\n    height,\n    maxWidth: maxWidth || INFINITY,\n    maxHeight: maxHeight || INFINITY\n  };\n}\n\nconst round1 = (v: number) => Math.round(v * 10) / 10;\n\n// eslint-disable-next-line complexity\nexport function getMaximumSize(\n  canvas: HTMLCanvasElement,\n  bbWidth?: number,\n  bbHeight?: number,\n  aspectRatio?: number\n): { width: number; height: number } {\n  const style = getComputedStyle(canvas);\n  const margins = getPositionedStyle(style, 'margin');\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n  let {width, height} = containerSize;\n\n  if (style.boxSizing === 'content-box') {\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const paddings = getPositionedStyle(style, 'padding');\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  width = Math.max(0, width - margins.width);\n  height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n  if (width && !height) {\n    // https://github.com/chartjs/Chart.js/issues/4659\n    // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n    height = round1(width / 2);\n  }\n\n  const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n\n  if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n    height = containerSize.height;\n    width = round1(Math.floor(height * aspectRatio));\n  }\n\n  return {width, height};\n}\n\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */\nexport function retinaScale(\n  chart: Chart,\n  forceRatio: number,\n  forceStyle?: boolean\n): boolean | void {\n  const pixelRatio = forceRatio || 1;\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\n\n  chart.height = Math.floor(chart.height);\n  chart.width = Math.floor(chart.width);\n\n  const canvas = chart.canvas;\n\n  // If no style has been set on the canvas, the render size is used as display size,\n  // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n  // See https://github.com/chartjs/Chart.js/issues/3575\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\n    canvas.style.height = `${chart.height}px`;\n    canvas.style.width = `${chart.width}px`;\n  }\n\n  if (chart.currentDevicePixelRatio !== pixelRatio\n      || canvas.height !== deviceHeight\n      || canvas.width !== deviceWidth) {\n    chart.currentDevicePixelRatio = pixelRatio;\n    canvas.height = deviceHeight;\n    canvas.width = deviceWidth;\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */\nexport const supportsEventListenerOptions = (function() {\n  let passiveSupported = false;\n  try {\n    const options = {\n      get passive() { // This function will be called when the browser attempts to access the passive property.\n        passiveSupported = true;\n        return false;\n      }\n    } as EventListenerOptions;\n\n    if (_isDomSupported()) {\n      window.addEventListener('test', null, options);\n      window.removeEventListener('test', null, options);\n    }\n  } catch (e) {\n    // continue regardless of error\n  }\n  return passiveSupported;\n}());\n\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */\n\nexport function readUsedSize(\n  element: HTMLElement,\n  property: 'width' | 'height'\n): number | undefined {\n  const value = getStyle(element, property);\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n  return matches ? +matches[1] : undefined;\n}\n", "import type {Point, SplinePoint} from '../types/geometric.js';\n\n/**\n * @private\n */\nexport function _pointInLine(p1: Point, p2: Point, t: number, mode?) { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: p1.y + t * (p2.y - p1.y)\n  };\n}\n\n/**\n * @private\n */\nexport function _steppedInterpolation(\n  p1: Point,\n  p2: Point,\n  t: number, mode: 'middle' | 'after' | unknown\n) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\n      : mode === 'after' ? t < 1 ? p1.y : p2.y\n        : t > 0 ? p2.y : p1.y\n  };\n}\n\n/**\n * @private\n */\nexport function _bezierInterpolation(p1: SplinePoint, p2: SplinePoint, t: number, mode?) { // eslint-disable-line @typescript-eslint/no-unused-vars\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\n  const a = _pointInLine(p1, cp1, t);\n  const b = _pointInLine(cp1, cp2, t);\n  const c = _pointInLine(cp2, p2, t);\n  const d = _pointInLine(a, b, t);\n  const e = _pointInLine(b, c, t);\n  return _pointInLine(d, e, t);\n}\n", "export interface RTLAdapter {\n  x(x: number): number;\n  setWidth(w: number): void;\n  textAlign(align: 'center' | 'left' | 'right'): 'center' | 'left' | 'right';\n  xPlus(x: number, value: number): number;\n  leftForLtr(x: number, itemWidth: number): number;\n}\n\nconst getRightToLeftAdapter = function(rectX: number, width: number): RTLAdapter {\n  return {\n    x(x) {\n      return rectX + rectX + width - x;\n    },\n    setWidth(w) {\n      width = w;\n    },\n    textAlign(align) {\n      if (align === 'center') {\n        return align;\n      }\n      return align === 'right' ? 'left' : 'right';\n    },\n    xPlus(x, value) {\n      return x - value;\n    },\n    leftForLtr(x, itemWidth) {\n      return x - itemWidth;\n    },\n  };\n};\n\nconst getLeftToRightAdapter = function(): RTLAdapter {\n  return {\n    x(x) {\n      return x;\n    },\n    setWidth(w) { // eslint-disable-line no-unused-vars\n    },\n    textAlign(align) {\n      return align;\n    },\n    xPlus(x, value) {\n      return x + value;\n    },\n    leftForLtr(x, _itemWidth) { // eslint-disable-line @typescript-eslint/no-unused-vars\n      return x;\n    },\n  };\n};\n\nexport function getRtlAdapter(rtl: boolean, rectX: number, width: number) {\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\n\nexport function overrideTextDirection(ctx: CanvasRenderingContext2D, direction: 'ltr' | 'rtl') {\n  let style: CSSStyleDeclaration, original: [string, string];\n  if (direction === 'ltr' || direction === 'rtl') {\n    style = ctx.canvas.style;\n    original = [\n      style.getPropertyValue('direction'),\n      style.getPropertyPriority('direction'),\n    ];\n\n    style.setProperty('direction', direction, 'important');\n    (ctx as { prevTextDirection?: [string, string] }).prevTextDirection = original;\n  }\n}\n\nexport function restoreTextDirection(ctx: CanvasRenderingContext2D, original?: [string, string]) {\n  if (original !== undefined) {\n    delete (ctx as { prevTextDirection?: [string, string] }).prevTextDirection;\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\n  }\n}\n", "import {_angleBetween, _angleDiff, _isBetween, _normalizeAngle} from './helpers.math.js';\nimport {createContext} from './helpers.options.js';\nimport {isPatternOrGradient} from './helpers.color.js';\n\n/**\n * @typedef { import('../elements/element.line.js').default } LineElement\n * @typedef { import('../elements/element.point.js').default } PointElement\n * @typedef {{start: number, end: number, loop: boolean, style?: any}} Segment\n */\n\nfunction propertyFn(property) {\n  if (property === 'angle') {\n    return {\n      between: _angleBetween,\n      compare: _angleDiff,\n      normalize: _normalizeAngle,\n    };\n  }\n  return {\n    between: _isBetween,\n    compare: (a, b) => a - b,\n    normalize: x => x\n  };\n}\n\nfunction normalizeSegment({start, end, count, loop, style}) {\n  return {\n    start: start % count,\n    end: end % count,\n    loop: loop && (end - start + 1) % count === 0,\n    style\n  };\n}\n\nfunction getSegment(segment, points, bounds) {\n  const {property, start: startBound, end: endBound} = bounds;\n  const {between, normalize} = propertyFn(property);\n  const count = points.length;\n  // eslint-disable-next-line prefer-const\n  let {start, end, loop} = segment;\n  let i, ilen;\n\n  if (loop) {\n    start += count;\n    end += count;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n        break;\n      }\n      start--;\n      end--;\n    }\n    start %= count;\n    end %= count;\n  }\n\n  if (end < start) {\n    end += count;\n  }\n  return {start, end, loop, style: segment.style};\n}\n\n/**\n * Returns the sub-segment(s) of a line segment that fall in the given bounds\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} [segment.style] - segment style\n * @param {PointElement[]} points - the points that this segment refers to\n * @param {object} [bounds]\n * @param {string} bounds.property - the property of a `PointElement` we are bounding. `x`, `y` or `angle`.\n * @param {number} bounds.start - start value of the property\n * @param {number} bounds.end - end value of the property\n * @private\n **/\nexport function _boundSegment(segment, points, bounds) {\n  if (!bounds) {\n    return [segment];\n  }\n\n  const {property, start: startBound, end: endBound} = bounds;\n  const count = points.length;\n  const {compare, between, normalize} = propertyFn(property);\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\n\n  const result = [];\n  let inside = false;\n  let subStart = null;\n  let value, point, prevValue;\n\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n  const shouldStart = () => inside || startIsBefore();\n  const shouldStop = () => !inside || endIsBefore();\n\n  for (let i = start, prev = start; i <= end; ++i) {\n    point = points[i % count];\n\n    if (point.skip) {\n      continue;\n    }\n\n    value = normalize(point[property]);\n\n    if (value === prevValue) {\n      continue;\n    }\n\n    inside = between(value, startBound, endBound);\n\n    if (subStart === null && shouldStart()) {\n      subStart = compare(value, startBound) === 0 ? i : prev;\n    }\n\n    if (subStart !== null && shouldStop()) {\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\n      subStart = null;\n    }\n    prev = i;\n    prevValue = value;\n  }\n\n  if (subStart !== null) {\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\n  }\n\n  return result;\n}\n\n\n/**\n * Returns the segments of the line that are inside given bounds\n * @param {LineElement} line\n * @param {object} [bounds]\n * @param {string} bounds.property - the property we are bounding with. `x`, `y` or `angle`.\n * @param {number} bounds.start - start value of the `property`\n * @param {number} bounds.end - end value of the `property`\n * @private\n */\nexport function _boundSegments(line, bounds) {\n  const result = [];\n  const segments = line.segments;\n\n  for (let i = 0; i < segments.length; i++) {\n    const sub = _boundSegment(segments[i], line.points, bounds);\n    if (sub.length) {\n      result.push(...sub);\n    }\n  }\n  return result;\n}\n\n/**\n * Find start and end index of a line.\n */\nfunction findStartAndEnd(points, count, loop, spanGaps) {\n  let start = 0;\n  let end = count - 1;\n\n  if (loop && !spanGaps) {\n    // loop and not spanning gaps, first find a gap to start from\n    while (start < count && !points[start].skip) {\n      start++;\n    }\n  }\n\n  // find first non skipped point (after the first gap possibly)\n  while (start < count && points[start].skip) {\n    start++;\n  }\n\n  // if we looped to count, start needs to be 0\n  start %= count;\n\n  if (loop) {\n    // loop will go past count, if start > 0\n    end += start;\n  }\n\n  while (end > start && points[end % count].skip) {\n    end--;\n  }\n\n  // end could be more than count, normalize\n  end %= count;\n\n  return {start, end};\n}\n\n/**\n * Compute solid segments from Points, when spanGaps === false\n * @param {PointElement[]} points - the points\n * @param {number} start - start index\n * @param {number} max - max index (can go past count on a loop)\n * @param {boolean} loop - boolean indicating that this would be a loop if no gaps are found\n */\nfunction solidSegments(points, start, max, loop) {\n  const count = points.length;\n  const result = [];\n  let last = start;\n  let prev = points[start];\n  let end;\n\n  for (end = start + 1; end <= max; ++end) {\n    const cur = points[end % count];\n    if (cur.skip || cur.stop) {\n      if (!prev.skip) {\n        loop = false;\n        result.push({start: start % count, end: (end - 1) % count, loop});\n        // @ts-ignore\n        start = last = cur.stop ? end : null;\n      }\n    } else {\n      last = end;\n      if (prev.skip) {\n        start = end;\n      }\n    }\n    prev = cur;\n  }\n\n  if (last !== null) {\n    result.push({start: start % count, end: last % count, loop});\n  }\n\n  return result;\n}\n\n/**\n * Compute the continuous segments that define the whole line\n * There can be skipped points within a segment, if spanGaps is true.\n * @param {LineElement} line\n * @param {object} [segmentOptions]\n * @return {Segment[]}\n * @private\n */\nexport function _computeSegments(line, segmentOptions) {\n  const points = line.points;\n  const spanGaps = line.options.spanGaps;\n  const count = points.length;\n\n  if (!count) {\n    return [];\n  }\n\n  const loop = !!line._loop;\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\n\n  if (spanGaps === true) {\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\n  }\n\n  const max = end < start ? end + count : end;\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n\n/**\n * @param {Segment[]} segments\n * @param {PointElement[]} points\n * @param {object} [segmentOptions]\n * @return {Segment[]}\n */\nfunction splitByStyles(line, segments, points, segmentOptions) {\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\n    return segments;\n  }\n  return doSplitByStyles(line, segments, points, segmentOptions);\n}\n\n/**\n * @param {LineElement} line\n * @param {Segment[]} segments\n * @param {PointElement[]} points\n * @param {object} [segmentOptions]\n * @return {Segment[]}\n */\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\n  const chartContext = line._chart.getContext();\n  const baseStyle = readStyle(line.options);\n  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\n  const count = points.length;\n  const result = [];\n  let prevStyle = baseStyle;\n  let start = segments[0].start;\n  let i = start;\n\n  function addStyle(s, e, l, st) {\n    const dir = spanGaps ? -1 : 1;\n    if (s === e) {\n      return;\n    }\n    // Style can not start/end on a skipped point, adjust indices accordingly\n    s += count;\n    while (points[s % count].skip) {\n      s -= dir;\n    }\n    while (points[e % count].skip) {\n      e += dir;\n    }\n    if (s % count !== e % count) {\n      result.push({start: s % count, end: e % count, loop: l, style: st});\n      prevStyle = st;\n      start = e % count;\n    }\n  }\n\n  for (const segment of segments) {\n    start = spanGaps ? start : segment.start;\n    let prev = points[start % count];\n    let style;\n    for (i = start + 1; i <= segment.end; i++) {\n      const pt = points[i % count];\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n        type: 'segment',\n        p0: prev,\n        p1: pt,\n        p0DataIndex: (i - 1) % count,\n        p1DataIndex: i % count,\n        datasetIndex\n      })));\n      if (styleChanged(style, prevStyle)) {\n        addStyle(start, i - 1, segment.loop, prevStyle);\n      }\n      prev = pt;\n      prevStyle = style;\n    }\n    if (start < i - 1) {\n      addStyle(start, i - 1, segment.loop, prevStyle);\n    }\n  }\n\n  return result;\n}\n\nfunction readStyle(options) {\n  return {\n    backgroundColor: options.backgroundColor,\n    borderCapStyle: options.borderCapStyle,\n    borderDash: options.borderDash,\n    borderDashOffset: options.borderDashOffset,\n    borderJoinStyle: options.borderJoinStyle,\n    borderWidth: options.borderWidth,\n    borderColor: options.borderColor\n  };\n}\n\nfunction styleChanged(style, prevStyle) {\n  if (!prevStyle) {\n    return false;\n  }\n  const cache = [];\n  const replacer = function(key, value) {\n    if (!isPatternOrGradient(value)) {\n      return value;\n    }\n    if (!cache.includes(value)) {\n      cache.push(value);\n    }\n    return cache.indexOf(value);\n  };\n  return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n", "import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n", "import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n", "import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n", "import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n", "import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n", "import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n", "import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n", "import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n", "import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n", "import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n", "import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n", "import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n", "/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n", "import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n", "import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n", "\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n", "/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n", "/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n", "import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n", "import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n", "import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n", "import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n", "import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n", "import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n", "import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n", "import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n", "import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n", "import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n", "import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n", "import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n", "import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n", "import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n", "import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n", "import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n", "/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n", "import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n", "/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n", "import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n", "import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n", "import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n", "/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n", "import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n", "import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n", "import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n", "import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n", "import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n", "import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n", "import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n", "import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n", "import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n", "import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n", "import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n", "export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n", "export const LINE_CHART_DEFAULT_COLOR = '#000';\r\n", "export const MonthsArray = [\r\n  'Jan',\r\n  'Feb',\r\n  'Mar',\r\n  'Apr',\r\n  'May',\r\n  'Jun',\r\n  'Jul',\r\n  'Aug',\r\n  'Sep',\r\n  'Oct',\r\n  'Nov',\r\n  'Dec',\r\n] as const;\r\n\r\ntype Months = (typeof MonthsArray)[number];\r\n\r\nexport const data: { month: Months; value: number }[] = [\r\n  {\r\n    month: 'Jan',\r\n    value: 14,\r\n  },\r\n  {\r\n    month: 'Feb',\r\n    value: 12,\r\n  },\r\n  {\r\n    month: 'Mar',\r\n    value: 12,\r\n  },\r\n  {\r\n    month: 'Apr',\r\n    value: 10,\r\n  },\r\n  {\r\n    month: 'May',\r\n    value: 9,\r\n  },\r\n  {\r\n    month: 'Jun',\r\n    value: 6.75,\r\n  },\r\n  {\r\n    month: 'Jul',\r\n    value: 6.75,\r\n  },\r\n  {\r\n    month: 'Aug',\r\n    value: 5.5,\r\n  },\r\n  {\r\n    month: 'Sep',\r\n    value: 10,\r\n  },\r\n  {\r\n    month: 'Oct',\r\n    value: 12,\r\n  },\r\n  {\r\n    month: 'Nov',\r\n    value: 12,\r\n  },\r\n  {\r\n    month: 'Dec',\r\n    value: 15,\r\n  },\r\n];\r\n", "export function assertValue<T>(value: T | undefined | null, errorMessage?: string): T {\r\n  if (value === null || value === undefined) {\r\n    throw new Error(errorMessage ?? 'Value was not provided!');\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nexport const wait = async (delayInMs: number) => new Promise((res) => setTimeout(res, delayInMs));\r\n", "import {\r\n  CategoryScale,\r\n  Chart,\r\n  type ChartConfiguration,\r\n  LinearScale,\r\n  LineController,\r\n  LineElement,\r\n  PointElement,\r\n  Tooltip,\r\n} from 'chart.js';\r\n\r\nimport { LINE_CHART_DEFAULT_COLOR } from '@/utils/constants';\r\nimport { data } from '@/utils/static-data';\r\nimport { assertValue } from '@/utils/util';\r\n\r\nChart.register(Tooltip, LineController, LineElement, PointElement, CategoryScale, LinearScale);\r\n\r\nconst initChart = () => {\r\n  const canvasElement = assertValue(\r\n    document.querySelector<HTMLCanvasElement>('#myChart'),\r\n    'Canvas element(#myChart) was not found!'\r\n  );\r\n\r\n  const computedStyles = window.getComputedStyle(canvasElement);\r\n\r\n  const { fontFamily, fontWeight, fontSize } = computedStyles;\r\n\r\n  const colorPrimary =\r\n    window.getComputedStyle(document.documentElement).getPropertyValue('--chart-primary') ??\r\n    LINE_CHART_DEFAULT_COLOR;\r\n  const colorBorder =\r\n    window.getComputedStyle(document.documentElement).getPropertyValue('--chart-border') ??\r\n    LINE_CHART_DEFAULT_COLOR;\r\n  const colorBorderMiddle =\r\n    window.getComputedStyle(document.documentElement).getPropertyValue('--chart-border-middle') ??\r\n    LINE_CHART_DEFAULT_COLOR;\r\n\r\n  const stepSize = 2;\r\n  const values = data.map((item) => item.value);\r\n  const months = data.map((item) => item.month);\r\n\r\n  const maxValue = values.reduce((acc, curr) => (curr > acc ? curr : acc), 0);\r\n  const numberOfLines = Math.ceil(maxValue / stepSize) + 1;\r\n\r\n  const config: ChartConfiguration<'line', number[], string> = {\r\n    type: 'line',\r\n    data: {\r\n      labels: months,\r\n      datasets: [\r\n        {\r\n          data: values,\r\n          borderWidth: 3,\r\n          borderColor: colorPrimary,\r\n          pointStyle: 'circle',\r\n        },\r\n      ],\r\n    },\r\n\r\n    options: {\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        x: {\r\n          border: { display: true, color: colorBorder, width: 2 },\r\n          grid: {\r\n            display: true,\r\n            lineWidth: 0,\r\n            drawTicks: true,\r\n            tickWidth: 2,\r\n            tickColor: colorBorder,\r\n            tickLength: 10,\r\n          },\r\n          offset: true,\r\n          ticks: { color: colorPrimary },\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          grid: {\r\n            lineWidth: (ctx) => {\r\n              if (ctx.index === Math.floor(numberOfLines / 2)) return 2;\r\n              return 1;\r\n            },\r\n            color: (ctx) => {\r\n              if (ctx.index === Math.floor(numberOfLines / 2)) return colorBorderMiddle;\r\n              return colorBorder;\r\n            },\r\n            drawTicks: false,\r\n          },\r\n          border: { display: true, color: colorBorder, width: 2 },\r\n          ticks: {\r\n            stepSize,\r\n            color: colorPrimary,\r\n            padding: 10,\r\n          },\r\n        },\r\n      },\r\n      plugins: {\r\n        legend: { display: false },\r\n        tooltip: { enabled: true },\r\n      },\r\n    },\r\n  };\r\n\r\n  Chart.defaults.font.family = fontFamily;\r\n  Chart.defaults.font.weight = Number.parseInt(fontWeight);\r\n  Chart.defaults.font.size = Number.parseFloat(fontSize);\r\n\r\n  let graph = new Chart(canvasElement, config);\r\n\r\n  document.fonts.ready.then(() => {\r\n    graph.destroy();\r\n    graph = new Chart(canvasElement, config);\r\n  });\r\n};\r\n\r\ninitChart();\r\n"],
  "mappings": "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",
  "names": ["color", "noop", "uid", "id", "isNullOrUndef", "value", "isArray", "Array", "type", "Object", "prototype", "toString", "call", "slice", "isObject", "isNumberFinite", "Number", "isFinite", "finiteOrDefault", "defaultValue", "valueOrDefault", "toDimension", "value", "dimension", "endsWith", "parseFloat", "callback", "fn", "args", "thisArg", "call", "apply", "each", "loopable", "reverse", "i", "len", "keys", "isArray", "length", "isObject", "Object", "_elementsEqual", "a0", "a1", "ilen", "v0", "v1", "datasetIndex", "index", "clone", "source", "map", "target", "create", "klen", "k", "isValidKey", "key", "indexOf", "_merger", "options", "tval", "sval", "merge", "sources", "merger", "current", "mergeIf", "_mergerIf", "prototype", "hasOwnProperty", "keyResolvers", "v", "x", "o", "y", "_splitKey", "key", "parts", "split", "keys", "tmp", "part", "endsWith", "slice", "push", "_getKeyResolver", "obj", "k", "resolveObjectKey", "resolver", "_capitalize", "str", "charAt", "toUpperCase", "defined", "value", "isFunction", "setsEqual", "a", "b", "size", "item", "has", "_isClickEvent", "e", "type", "PI", "Math", "TAU", "PITAU", "INFINITY", "Number", "POSITIVE_INFINITY", "RAD_PER_DEG", "HALF_PI", "QUARTER_PI", "TWO_THIRDS_PI", "log10", "sign", "almostEquals", "epsilon", "abs", "niceNum", "range", "roundedRange", "round", "niceRange", "pow", "floor", "fraction", "niceFraction", "_factorize", "result", "sqrt", "i", "sort", "pop", "isNumber", "n", "isNaN", "parseFloat", "isFinite", "almostWhole", "rounded", "_setMinAndMaxByKey", "array", "target", "property", "ilen", "length", "min", "max", "toRadians", "degrees", "toDegrees", "radians", "_decimalPlaces", "isFiniteNumber", "p", "getAngleFromPoint", "centrePoint", "anglePoint", "distanceFromXCenter", "distanceFromYCenter", "radialDistanceFromCenter", "angle", "atan2", "distance", "distanceBetweenPoints", "pt1", "pt2", "_angleDiff", "_normalizeAngle", "_angleBetween", "start", "end", "sameAngleIsFullCircle", "s", "angleToStart", "angleToEnd", "startToAngle", "endToAngle", "_limitValue", "_int16Range", "_isBetween", "_lookup", "table", "cmp", "index", "hi", "lo", "mid", "_lookupByKey", "last", "ti", "_rlookupByKey", "_filterBetween", "values", "arrayEvents", "listenArrayEvents", "listener", "_chartjs", "listeners", "Object", "defineProperty", "configurable", "enumerable", "forEach", "method", "base", "args", "res", "apply", "object", "unlistenArrayEvents", "stub", "indexOf", "splice", "_arrayUnique", "items", "set", "Set", "Array", "from", "requestAnimFrame", "window", "callback", "requestAnimationFrame", "throttled", "fn", "thisArg", "argsToUse", "ticking", "args", "call", "apply", "debounce", "delay", "timeout", "clearTimeout", "setTimeout", "_toLeftRightCenter", "align", "_alignStartEnd", "start", "end", "_getStartAndCountOfVisiblePoints", "meta", "points", "animationsDisabled", "pointCount", "length", "start", "count", "_sorted", "iScale", "_parsed", "axis", "min", "max", "minDefined", "maxDefined", "getUserBounds", "_limitValue", "Math", "_lookupByKey", "lo", "getPixelForValue", "hi", "_scaleRangesChanged", "xScale", "yScale", "_scaleRanges", "newRanges", "xmin", "xmax", "ymin", "ymax", "changed", "Object", "assign", "atEdge", "t", "elasticIn", "s", "p", "pow", "sin", "TAU", "elasticOut", "effects", "linear", "easeInQuad", "easeOutQuad", "easeInOutQuad", "easeInCubic", "easeOutCubic", "easeInOutCubic", "easeInQuart", "easeOutQuart", "easeInOutQuart", "easeInQuint", "easeOutQuint", "easeInOutQuint", "easeInSine", "cos", "HALF_PI", "easeOutSine", "easeInOutSine", "PI", "easeInExpo", "easeOutExpo", "easeInOutExpo", "easeInCirc", "sqrt", "easeOutCirc", "easeInOutCirc", "easeInElastic", "easeOutElastic", "easeInOutElastic", "easeInBack", "easeOutBack", "easeInOutBack", "easeInBounce", "easeOutBounce", "m", "d", "easeInOutBounce", "isPatternOrGradient", "value", "type", "toString", "color", "Color", "getHoverColor", "saturate", "darken", "hexString", "numbers", "colors", "applyAnimationsDefaults", "defaults", "set", "delay", "undefined", "duration", "easing", "fn", "from", "loop", "to", "describe", "_fallback", "_indexable", "_scriptable", "name", "properties", "active", "animation", "resize", "show", "animations", "visible", "hide", "v", "applyLayoutsDefaults", "autoPadding", "padding", "top", "right", "bottom", "left", "intlCache", "Map", "getNumberFormat", "locale", "options", "cacheKey", "JSON", "stringify", "formatter", "get", "Intl", "NumberFormat", "formatNumber", "num", "format", "formatters", "values", "isArray", "numeric", "tickValue", "index", "ticks", "chart", "notation", "delta", "maxTick", "abs", "calculateDelta", "logDelta", "log10", "numDecimal", "isNaN", "floor", "minimumFractionDigits", "maximumFractionDigits", "logarithmic", "remain", "significand", "includes", "call", "applyScaleDefaults", "display", "offset", "reverse", "beginAtZero", "bounds", "clip", "grace", "grid", "lineWidth", "drawOnChartArea", "drawTicks", "tickLength", "tickWidth", "_ctx", "tickColor", "border", "dash", "dashOffset", "width", "title", "text", "minRotation", "maxRotation", "mirror", "textStrokeWidth", "textStrokeColor", "autoSkip", "autoSkipPadding", "labelOffset", "callback", "Ticks", "minor", "major", "align", "crossAlign", "showLabelBackdrop", "backdropColor", "backdropPadding", "route", "startsWith", "overrides", "create", "descriptors", "getScope", "node", "key", "keys", "split", "i", "n", "k", "root", "scope", "merge", "Defaults", "constructor", "_descriptors", "_appliers", "backgroundColor", "borderColor", "datasets", "devicePixelRatio", "context", "platform", "getDevicePixelRatio", "elements", "events", "font", "family", "size", "style", "lineHeight", "weight", "hover", "hoverBackgroundColor", "ctx", "hoverBorderColor", "hoverColor", "indexAxis", "interaction", "mode", "intersect", "includeInvisible", "maintainAspectRatio", "onHover", "onClick", "parsing", "plugins", "responsive", "scale", "scales", "showLine", "drawActiveElementsOnTop", "apply", "override", "targetScope", "targetName", "scopeObject", "targetScopeObject", "privateName", "defineProperties", "writable", "enumerable", "local", "target", "isObject", "valueOrDefault", "appliers", "forEach", "toFontString", "isNullOrUndef", "_measureText", "data", "gc", "longest", "string", "textWidth", "measureText", "push", "_longestText", "arrayOfThings", "cache", "garbageCollect", "save", "ilen", "j", "jlen", "thing", "nestedThing", "restore", "gcLen", "splice", "_alignPixel", "pixel", "currentDevicePixelRatio", "halfWidth", "round", "clearCanvas", "canvas", "getContext", "resetTransform", "clearRect", "height", "drawPoint", "x", "y", "drawPointLegend", "w", "xOffset", "yOffset", "cornerRadius", "xOffsetW", "yOffsetW", "pointStyle", "rotation", "radius", "rad", "RAD_PER_DEG", "translate", "rotate", "drawImage", "beginPath", "ellipse", "arc", "closePath", "moveTo", "TWO_THIRDS_PI", "lineTo", "QUARTER_PI", "SQRT1_2", "rect", "fill", "borderWidth", "stroke", "_isPointInArea", "point", "area", "margin", "clipArea", "unclipArea", "_steppedLineTo", "previous", "flip", "midpoint", "_bezierCurveTo", "bezierCurveTo", "cp1x", "cp2x", "cp1y", "cp2y", "setRenderOpts", "opts", "translation", "fillStyle", "textAlign", "textBaseline", "decorateText", "line", "strikethrough", "underline", "metrics", "actualBoundingBoxLeft", "actualBoundingBoxRight", "actualBoundingBoxAscent", "actualBoundingBoxDescent", "yDecoration", "strokeStyle", "decorationWidth", "drawBackdrop", "oldColor", "fillRect", "renderText", "lines", "strokeWidth", "strokeColor", "backdrop", "strokeText", "maxWidth", "fillText", "Number", "addRoundedRectPath", "h", "topLeft", "bottomLeft", "bottomRight", "topRight", "LINE_HEIGHT", "FONT_STYLE", "toLineHeight", "matches", "match", "numberOrZero", "_readValueToProps", "props", "ret", "objProps", "read", "prop", "toTRBL", "toTRBLCorners", "toPadding", "obj", "toFont", "fallback", "parseInt", "console", "warn", "resolve", "inputs", "info", "cacheable", "_addGrace", "minmax", "change", "toDimension", "keepZero", "add", "createContext", "parentContext", "_createResolver", "scopes", "prefixes", "rootScopes", "getTarget", "finalRootScopes", "_resolve", "Symbol", "toStringTag", "_cacheable", "_scopes", "_rootScopes", "_getTarget", "Proxy", "deleteProperty", "_keys", "_cached", "_resolveWithPrefixes", "getOwnPropertyDescriptor", "Reflect", "getPrototypeOf", "has", "getKeysFromAllScopes", "ownKeys", "storage", "_storage", "_attachContext", "proxy", "subProxy", "descriptorDefaults", "_proxy", "_context", "_subProxy", "_stack", "Set", "setContext", "receiver", "_resolveWithContext", "allKeys", "configurable", "scriptable", "indexable", "_allKeys", "isScriptable", "isFunction", "isIndexable", "readKey", "prefix", "_capitalize", "needsSubResolver", "prototype", "hasOwnProperty", "_resolveScriptable", "_resolveArray", "getValue", "Error", "Array", "join", "delete", "createSubResolver", "arr", "filter", "item", "resolver", "resolveFallback", "parent", "resolveObjectKey", "addScopes", "parentScopes", "parentFallback", "allScopes", "addScopesFromKey", "subGetTarget", "resolveKeysFromAllScopes", "EPSILON", "Number", "getPoint", "points", "i", "length", "skip", "getValueAxis", "indexAxis", "splineCurve", "firstPoint", "middlePoint", "afterPoint", "t", "previous", "current", "next", "d01", "distanceBetweenPoints", "d12", "s01", "s12", "isNaN", "fa", "fb", "x", "y", "monotoneAdjust", "deltaK", "mK", "pointsLen", "alphaK", "betaK", "tauK", "squaredMagnitude", "pointCurrent", "pointAfter", "almostEquals", "Math", "pow", "sqrt", "monotoneCompute", "valueAxis", "delta", "pointBefore", "iPixel", "vPixel", "splineCurveMonotone", "Array", "fill", "slopeDelta", "sign", "capControlPoint", "pt", "min", "max", "capBezierPoints", "area", "ilen", "point", "inArea", "inAreaPrev", "inAreaNext", "_isPointInArea", "cp1x", "left", "right", "cp1y", "top", "bottom", "cp2x", "cp2y", "_updateBezierControlPoints", "options", "loop", "controlPoints", "spanGaps", "filter", "cubicInterpolationMode", "prev", "tension", "_isDomSupported", "window", "document", "_getParentNode", "domNode", "parent", "parentNode", "toString", "host", "parseMaxStyle", "styleValue", "node", "parentProperty", "valueInPixels", "parseInt", "indexOf", "getComputedStyle", "element", "ownerDocument", "defaultView", "getStyle", "el", "property", "getPropertyValue", "positions", "getPositionedStyle", "styles", "style", "suffix", "result", "pos", "parseFloat", "width", "height", "useOffsetPos", "target", "shadowRoot", "getCanvasPosition", "e", "canvas", "touches", "source", "offsetX", "offsetY", "box", "rect", "getBoundingClientRect", "clientX", "clientY", "getRelativePosition", "event", "chart", "currentDevicePixelRatio", "borderBox", "boxSizing", "paddings", "borders", "xOffset", "yOffset", "round", "getContainerSize", "maxWidth", "maxHeight", "undefined", "container", "clientWidth", "clientHeight", "containerStyle", "containerBorder", "containerPadding", "INFINITY", "round1", "v", "getMaximumSize", "bbWidth", "bbHeight", "aspectRatio", "margins", "containerSize", "maintainHeight", "floor", "retinaScale", "forceRatio", "forceStyle", "pixelRatio", "deviceHeight", "deviceWidth", "ctx", "setTransform", "supportsEventListenerOptions", "passiveSupported", "passive", "addEventListener", "removeEventListener", "readUsedSize", "value", "matches", "match", "_pointInLine", "p1", "p2", "mode", "_steppedInterpolation", "_bezierInterpolation", "cp1", "cp2", "a", "b", "c", "d", "getRightToLeftAdapter", "rectX", "setWidth", "w", "textAlign", "align", "xPlus", "leftForLtr", "itemWidth", "getLeftToRightAdapter", "_itemWidth", "getRtlAdapter", "rtl", "overrideTextDirection", "direction", "original", "getPropertyPriority", "setProperty", "prevTextDirection", "restoreTextDirection", "propertyFn", "between", "_angleBetween", "compare", "_angleDiff", "normalize", "_normalizeAngle", "_isBetween", "normalizeSegment", "start", "end", "count", "getSegment", "segment", "bounds", "startBound", "endBound", "_boundSegment", "inside", "subStart", "prevValue", "startIsBefore", "endIsBefore", "shouldStart", "shouldStop", "push", "_boundSegments", "line", "segments", "sub", "findStartAndEnd", "solidSegments", "last", "cur", "stop", "_computeSegments", "segmentOptions", "_loop", "splitByStyles", "completeLoop", "_fullLoop", "setContext", "doSplitByStyles", "chartContext", "_chart", "getContext", "baseStyle", "readStyle", "_datasetIndex", "datasetIndex", "prevStyle", "addStyle", "s", "l", "st", "dir", "createContext", "type", "p0", "p0DataIndex", "p1DataIndex", "styleChanged", "backgroundColor", "borderCapStyle", "borderDash", "borderDashOffset", "borderJoinStyle", "borderWidth", "borderColor", "cache", "replacer", "key", "isPatternOrGradient", "includes", "JSON", "stringify", "Animator", "constructor", "_request", "_charts", "Map", "_running", "_lastDate", "undefined", "_notify", "chart", "anims", "date", "type", "callbacks", "listeners", "numSteps", "duration", "forEach", "fn", "initial", "currentStep", "Math", "min", "start", "_refresh", "requestAnimFrame", "call", "window", "_update", "Date", "now", "remaining", "running", "items", "length", "i", "draw", "item", "_active", "_total", "tick", "pop", "_getAnims", "charts", "get", "complete", "progress", "set", "listen", "event", "cb", "push", "add", "has", "reduce", "acc", "cur", "max", "_duration", "stop", "cancel", "remove", "delete", "transparent", "interpolators", "boolean", "from", "to", "factor", "color", "c0", "helpersColor", "c1", "valid", "mix", "hexString", "number", "Animation", "cfg", "target", "prop", "currentValue", "resolve", "_fn", "_easing", "effects", "easing", "linear", "_start", "floor", "delay", "_loop", "loop", "_target", "_prop", "_from", "_to", "_promises", "active", "update", "elapsed", "remain", "wait", "promises", "Promise", "res", "rej", "resolved", "method", "Animations", "config", "_chart", "_properties", "configure", "isObject", "animationOptions", "Object", "keys", "defaults", "animation", "animatedProps", "getOwnPropertyNames", "key", "option", "isArray", "properties", "_animateOptions", "values", "newOptions", "options", "resolveTargetOptions", "animations", "_createAnimations", "$shared", "awaitAll", "$animations", "then", "props", "charAt", "value", "size", "assign", "animator", "anim", "all", "scaleClip", "scale", "allowedOverflow", "opts", "reverse", "end", "defaultClip", "xScale", "yScale", "x", "y", "top", "right", "bottom", "left", "toClip", "t", "r", "b", "l", "disabled", "getSortedDatasetIndices", "filterVisible", "metasets", "_getSortedDatasetMetas", "ilen", "index", "applyStack", "stack", "dsIndex", "singleMode", "mode", "datasetIndex", "otherValue", "isFinite", "sign", "convertObjectDataToArray", "data", "meta", "iScale", "vScale", "iAxisKey", "axis", "vAxisKey", "adata", "Array", "isStacked", "stacked", "getStackKey", "indexScale", "valueScale", "id", "getUserBounds", "minDefined", "maxDefined", "Number", "NEGATIVE_INFINITY", "POSITIVE_INFINITY", "getOrCreateStack", "stacks", "stackKey", "indexValue", "subStack", "getLastIndexInStack", "positive", "getMatchingVisibleMetas", "updateStacks", "controller", "parsed", "_cachedMeta", "_stacks", "iAxis", "vAxis", "itemStacks", "_top", "_bottom", "visualValues", "_visualValues", "getFirstScaleId", "scales", "filter", "shift", "createDatasetContext", "parent", "createContext", "dataset", "createDataContext", "element", "dataIndex", "raw", "clearStacks", "_parsed", "isDirectUpdateMode", "cloneIfNotShared", "cached", "shared", "createStack", "canStack", "hidden", "_stacked", "DatasetController", "datasetElementType", "dataElementType", "_ctx", "ctx", "_cachedDataOpts", "getMeta", "_type", "_parsing", "_data", "_objectData", "_sharedOptions", "_drawStart", "_drawCount", "enableOptionSharing", "supportsDecimation", "$context", "_syncList", "initialize", "linkScales", "addElements", "fill", "isPluginEnabled", "console", "warn", "updateIndex", "getDataset", "chooseId", "xid", "xAxisID", "valueOrDefault", "yid", "yAxisID", "rid", "rAxisID", "indexAxis", "iid", "iAxisID", "vid", "vAxisID", "getScaleForId", "rScale", "datasets", "getDatasetMeta", "scaleID", "_getOtherScale", "reset", "_destroy", "unlistenArrayEvents", "_dataCheck", "isExtensible", "listenArrayEvents", "buildOrUpdateElements", "resetNewElements", "stackChanged", "oldStacked", "_resyncElements", "scopeKeys", "datasetScopeKeys", "scopes", "getOptionScopes", "createResolver", "getContext", "parsing", "parse", "count", "sorted", "_sorted", "prev", "parseArrayData", "parseObjectData", "parsePrimitiveData", "isNotInOrderComparedToPrev", "labels", "getLabels", "singleScale", "xAxisKey", "yAxisKey", "resolveObjectKey", "getParsed", "getDataElement", "updateRangeFromParsed", "range", "parsedValue", "NaN", "getMinMax", "otherScale", "otherMin", "otherMax", "_skip", "getAllParsedValues", "getMaxOverflow", "getLabelAndValue", "label", "getLabelForValue", "_clip", "clip", "elements", "area", "chartArea", "drawActiveElementsOnTop", "getStyle", "resolveDatasetElementOptions", "resolveDataElementOptions", "context", "_resolveElementOptions", "elementType", "cache", "cacheKey", "sharing", "defined", "datasetElementScopeKeys", "prefixes", "names", "resolveNamedOptions", "freeze", "_resolveAnimations", "transition", "datasetAnimationScopeKeys", "_cacheable", "getSharedOptions", "includeOptions", "sharedOptions", "_animationsDisabled", "_getSharedOptions", "firstOpts", "previouslySharedOptions", "updateSharedOptions", "updateElement", "_setStyle", "removeHoverStyle", "setHoverStyle", "_removeDatasetHoverStyle", "_setDatasetHoverStyle", "arg1", "arg2", "numMeta", "numData", "_insertElements", "_removeElements", "move", "arr", "updateElements", "removed", "splice", "_sync", "args", "_dataChanges", "_onDataPush", "arguments", "_onDataPop", "_onDataShift", "_onDataSplice", "newCount", "_onDataUnshift", "LineController", "DatasetController", "id", "defaults", "datasetElementType", "dataElementType", "showLine", "spanGaps", "overrides", "scales", "_index_", "type", "_value_", "initialize", "enableOptionSharing", "supportsDecimation", "update", "mode", "meta", "_cachedMeta", "dataset", "line", "data", "points", "_dataset", "animationsDisabled", "chart", "_animationsDisabled", "start", "count", "_getStartAndCountOfVisiblePoints", "_drawStart", "_drawCount", "_scaleRangesChanged", "length", "_chart", "_datasetIndex", "index", "_decimated", "options", "resolveDatasetElementOptions", "borderWidth", "segment", "updateElement", "undefined", "animated", "updateElements", "reset", "iScale", "vScale", "_stacked", "sharedOptions", "includeOptions", "_getSharedOptions", "iAxis", "axis", "vAxis", "maxGapLength", "isNumber", "Number", "POSITIVE_INFINITY", "directUpdate", "end", "pointsCount", "prevParsed", "getParsed", "i", "point", "properties", "skip", "parsed", "nullData", "isNullOrUndef", "iPixel", "getPixelForValue", "vPixel", "getBasePixel", "applyStack", "isNaN", "stop", "abs", "raw", "resolveDataElementOptions", "active", "getMaxOverflow", "border", "firstPoint", "size", "lastPoint", "Math", "max", "draw", "updateControlPoints", "chartArea", "abstract", "Error", "DateAdapterBase", "override", "members", "Object", "assign", "prototype", "options", "constructor", "init", "formats", "parse", "format", "add", "diff", "startOf", "endOf", "_date", "binarySearch", "metaset", "axis", "value", "intersect", "controller", "data", "_sorted", "iScale", "_cachedMeta", "length", "lookupMethod", "_reversePixels", "_rlookupByKey", "_lookupByKey", "_sharedOptions", "el", "range", "getRange", "start", "end", "lo", "hi", "evaluateInteractionItems", "chart", "position", "handler", "metasets", "getSortedVisibleDatasetMetas", "i", "ilen", "index", "j", "element", "skip", "getDistanceMetricForAxis", "useX", "indexOf", "useY", "pt1", "pt2", "deltaX", "Math", "abs", "x", "deltaY", "y", "sqrt", "pow", "getIntersectItems", "useFinalPosition", "includeInvisible", "items", "isPointInArea", "evaluationFunc", "datasetIndex", "_isPointInArea", "chartArea", "inRange", "push", "getNearestRadialItems", "startAngle", "endAngle", "getProps", "angle", "getAngleFromPoint", "_angleBetween", "getNearestCartesianItems", "distanceMetric", "minDistance", "Number", "POSITIVE_INFINITY", "center", "getCenterPoint", "pointInArea", "distance", "getNearestItems", "getAxisItems", "rangeMethod", "intersectsItem", "modes", "e", "getRelativePosition", "elements", "forEach", "meta", "dataset", "getDatasetMeta", "point", "nearest", "STATIC_POSITIONS", "filterByPosition", "array", "filter", "v", "pos", "filterDynamicPositionByAxis", "box", "sortByWeight", "reverse", "sort", "a", "b", "v0", "v1", "weight", "wrapBoxes", "boxes", "layoutBoxes", "stack", "stackWeight", "horizontal", "isHorizontal", "buildStacks", "layouts", "stacks", "wrap", "includes", "_stack", "count", "placed", "size", "setLayoutDims", "params", "vBoxMaxWidth", "hBoxMaxHeight", "layout", "fullSize", "factor", "width", "availableWidth", "height", "availableHeight", "buildLayoutBoxes", "left", "right", "top", "bottom", "centerHorizontal", "centerVertical", "leftAndTop", "concat", "rightAndBottom", "vertical", "getCombinedMax", "maxPadding", "max", "updateMaxPadding", "boxPadding", "updateDims", "isObject", "getPadding", "newWidth", "outerWidth", "newHeight", "outerHeight", "widthChanged", "w", "heightChanged", "h", "same", "other", "handleMaxPadding", "updatePos", "change", "getMargins", "marginForPositions", "positions", "margin", "fitBoxes", "refitBoxes", "refit", "changed", "update", "setBoxDims", "placeBoxes", "userPadding", "padding", "defined", "addBox", "item", "_layers", "z", "draw", "removeBox", "layoutItem", "splice", "configure", "minPadding", "toPadding", "verticalBoxes", "horizontalBoxes", "each", "beforeLayout", "visibleVerticalBoxCount", "reduce", "total", "display", "freeze", "BasePlatform", "acquireContext", "canvas", "aspectRatio", "releaseContext", "context", "addEventListener", "type", "listener", "removeEventListener", "getDevicePixelRatio", "getMaximumSize", "floor", "isAttached", "updateConfig", "config", "BasicPlatform", "getContext", "animation", "EXPANDO_KEY", "EVENT_TYPES", "touchstart", "touchmove", "touchend", "pointerenter", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointerout", "isNullOrEmpty", "initCanvas", "style", "renderHeight", "getAttribute", "renderWidth", "initial", "boxSizing", "displayWidth", "readUsedSize", "undefined", "displayHeight", "eventListenerOptions", "supportsEventListenerOptions", "passive", "addListener", "node", "removeListener", "fromNativeEvent", "event", "native", "nodeListContains", "nodeList", "contains", "createAttachObserver", "observer", "MutationObserver", "entries", "trigger", "entry", "addedNodes", "removedNodes", "observe", "document", "childList", "subtree", "createDetachObserver", "drpListeningCharts", "Map", "oldDevicePixelRatio", "onWindowResize", "dpr", "window", "devicePixelRatio", "resize", "currentDevicePixelRatio", "listenDevicePixelRatioChanges", "set", "unlistenDevicePixelRatioChanges", "delete", "createResizeObserver", "container", "_getParentNode", "throttled", "clientWidth", "ResizeObserver", "contentRect", "releaseObserver", "disconnect", "createProxyAndListen", "proxy", "ctx", "DomPlatform", "prop", "isNullOrUndef", "removeAttribute", "setAttribute", "keys", "key", "proxies", "$proxies", "handlers", "attach", "detach", "isConnected", "_detectPlatform", "_isDomSupported", "OffscreenCanvas", "Element", "defaults", "defaultRoutes", "active", "$animations", "tooltipPosition", "hasValue", "isNumber", "props", "final", "anims", "ret", "_to", "autoSkip", "scale", "ticks", "tickOpts", "determinedMaxTicks", "determineMaxTicks", "ticksLimit", "min", "maxTicksLimit", "majorIndices", "major", "enabled", "getMajorIndices", "numMajorIndices", "first", "last", "newTicks", "skipMajors", "spacing", "calculateSpacing", "avgMajorSpacing", "round", "offset", "tickLength", "_tickSize", "maxScale", "_length", "maxChart", "_maxLength", "evenMajorSpacing", "getEvenSpacing", "factors", "_factorize", "result", "next", "ceil", "majorStart", "majorEnd", "valueOrDefault", "arr", "len", "reverseAlign", "align", "offsetFromEdge", "edge", "getTicksLimit", "ticksLength", "sample", "numItems", "increment", "getPixelForGridLine", "offsetGridLines", "validIndex", "_startPixel", "_endPixel", "epsilon", "lineValue", "getPixelForTick", "garbageCollect", "caches", "cache", "gc", "gcLen", "getTickMarkLength", "drawTicks", "getTitleHeight", "fallback", "font", "toFont", "lines", "isArray", "text", "lineHeight", "createScaleContext", "parent", "createContext", "createTickContext", "tick", "titleAlign", "_toLeftRightCenter", "titleArgs", "scales", "rotation", "maxWidth", "titleX", "titleY", "_alignStartEnd", "positionAxisID", "getPixelForValue", "HALF_PI", "Scale", "cfg", "id", "_margins", "maxHeight", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "labelRotation", "_range", "_gridLineItems", "_labelItems", "_labelSizes", "_longestTextCache", "_userMax", "_userMin", "_suggestedMax", "_suggestedMin", "_ticksLength", "_borderValue", "_cache", "_dataLimitsCached", "$context", "setContext", "suggestedMin", "suggestedMax", "raw", "getUserBounds", "finiteOrDefault", "NEGATIVE_INFINITY", "minDefined", "isFinite", "maxDefined", "getMinMax", "canStack", "metas", "getMatchingVisibleMetas", "getTicks", "getLabels", "labels", "xLabels", "yLabels", "getLabelItems", "_computeLabelItems", "beforeUpdate", "call", "margins", "beginAtZero", "grace", "sampleSize", "beforeSetDimensions", "setDimensions", "afterSetDimensions", "beforeDataLimits", "determineDataLimits", "afterDataLimits", "_addGrace", "beforeBuildTicks", "buildTicks", "afterBuildTicks", "samplingEnabled", "_convertTicksToLabels", "beforeCalculateLabelRotation", "calculateLabelRotation", "afterCalculateLabelRotation", "source", "afterAutoSkip", "beforeFit", "fit", "afterFit", "afterUpdate", "reversePixels", "startPixel", "endPixel", "_alignToPixels", "alignToPixels", "_callHooks", "name", "notifyPlugins", "beforeTickToLabelConversion", "generateTickLabels", "label", "callback", "afterTickToLabelConversion", "numTicks", "minRotation", "maxRotation", "tickWidth", "maxLabelDiagonal", "_isVisible", "labelSizes", "_getLabelSizes", "maxLabelWidth", "widest", "maxLabelHeight", "highest", "_limitValue", "grid", "title", "toDegrees", "asin", "minSize", "titleOpts", "gridOpts", "titleHeight", "tickPadding", "angleRadians", "toRadians", "cos", "sin", "labelHeight", "mirror", "labelWidth", "_calculatePadding", "_handleMargins", "isRotated", "labelsBelowTicks", "offsetLeft", "offsetRight", "isFullSize", "_computeLabelSizes", "widths", "heights", "widestLabelSize", "highestLabelSize", "jlen", "tickFont", "fontString", "nestedLabel", "_resolveTickFontOptions", "string", "_measureText", "valueAt", "idx", "getLabelForValue", "NaN", "getValueForPixel", "pixel", "getPixelForDecimal", "decimal", "_int16Range", "_alignPixel", "getDecimalForPixel", "getBasePixel", "getBaseValue", "optionTicks", "rot", "autoSkipPadding", "_computeGridLineItems", "border", "tl", "borderOpts", "axisWidth", "axisHalfWidth", "alignBorderValue", "borderValue", "alignedLineValue", "tx1", "ty1", "tx2", "ty2", "x1", "y1", "x2", "y2", "limit", "step", "optsAtIndex", "optsAtIndexBorder", "lineWidth", "lineColor", "color", "borderDash", "dash", "borderDashOffset", "dashOffset", "tickColor", "tickBorderDash", "tickBorderDashOffset", "crossAlign", "tickAndPadding", "hTickAndPadding", "textAlign", "lineCount", "textOffset", "textBaseline", "_getXAxisLabelAlignment", "_getYAxisLabelAlignment", "labelOffset", "halfCount", "strokeColor", "textStrokeColor", "strokeWidth", "textStrokeWidth", "tickTextAlign", "showLabelBackdrop", "backdrop", "labelPadding", "backdropPadding", "backdropColor", "translation", "_computeLabelArea", "drawBackground", "backgroundColor", "save", "fillStyle", "fillRect", "restore", "getLineWidthForValue", "findIndex", "t", "opts", "drawGrid", "drawLine", "p1", "p2", "strokeStyle", "setLineDash", "lineDashOffset", "beginPath", "moveTo", "lineTo", "stroke", "drawOnChartArea", "drawBorder", "lastLineWidth", "drawLabels", "area", "clipArea", "renderTextOptions", "renderText", "unclipArea", "drawTitle", "tz", "gz", "bz", "axisID", "_maxDigits", "fontSize", "TypedRegistry", "scope", "create", "isForType", "isPrototypeOf", "register", "proto", "getPrototypeOf", "parentScope", "isIChartComponent", "registerDefaults", "overrides", "get", "unregister", "itemDefaults", "merge", "routeDefaults", "descriptors", "describe", "routes", "property", "propertyParts", "split", "sourceName", "pop", "sourceScope", "join", "parts", "targetName", "targetScope", "route", "Registry", "controllers", "DatasetController", "plugins", "_typedRegistries", "args", "_each", "remove", "addControllers", "addElements", "addPlugins", "addScales", "getController", "_get", "getElement", "getPlugin", "getScale", "removeControllers", "removeElements", "removePlugins", "removeScales", "method", "typedRegistry", "arg", "reg", "_getRegistryForType", "_exec", "itemReg", "registry", "component", "camelMethod", "_capitalize", "PluginService", "_init", "notify", "hook", "_createDescriptors", "_notify", "_descriptors", "descriptor", "plugin", "callCallback", "cancelable", "invalidate", "_oldCache", "_notifyStateChanges", "all", "allPlugins", "createDescriptors", "previousDescriptors", "some", "localIds", "local", "getOpts", "pluginOpts", "pluginScopeKeys", "scopes", "getOptionScopes", "createResolver", "scriptable", "indexable", "allKeys", "getIndexAxis", "datasetDefaults", "datasets", "datasetOptions", "indexAxis", "getAxisFromDefaultScaleID", "getDefaultScaleIDFromAxis", "idMatchesAxis", "axisFromPosition", "determineAxis", "scaleOptions", "toLowerCase", "getAxisFromDataset", "retrieveAxisFromDatasets", "boundDs", "d", "xAxisID", "yAxisID", "mergeScaleConfig", "chartDefaults", "configScales", "chartIndexAxis", "scaleConf", "console", "error", "_proxy", "warn", "defaultId", "defaultScaleOptions", "mergeIf", "defaultID", "initOptions", "initData", "initConfig", "keyCache", "keysCached", "Set", "cachedKeys", "cacheKey", "generate", "addIfFound", "obj", "resolveObjectKey", "Config", "_config", "_scopeCache", "_resolverCache", "platform", "clearCache", "clear", "datasetScopeKeys", "datasetType", "datasetAnimationScopeKeys", "transition", "datasetElementScopeKeys", "elementType", "additionalOptionScopes", "_cachedScopes", "mainScope", "resetCache", "keyLists", "cached", "Array", "from", "has", "chartOptionScopes", "resolveNamedOptions", "names", "prefixes", "$shared", "resolver", "subPrefixes", "getResolver", "needContext", "isFunction", "subResolver", "_attachContext", "descriptorDefaults", "resolverCache", "_createResolver", "p", "hasFunction", "getOwnPropertyNames", "isScriptable", "isIndexable", "KNOWN_POSITIONS", "positionIsHorizontal", "compare2Level", "l1", "l2", "onAnimationsComplete", "animationOptions", "onComplete", "onAnimationProgress", "onProgress", "getCanvas", "getElementById", "instances", "getChart", "values", "c", "moveNumericKeys", "move", "intKey", "determineLastEvent", "lastEvent", "inChartArea", "isClick", "getSizeForArea", "field", "clip", "getDatasetArea", "xScale", "yScale", "Chart", "version", "invalidatePlugins", "userConfig", "initialCanvas", "existingChart", "uid", "_options", "_aspectRatio", "_metasets", "_stacks", "_active", "_lastEvent", "_listeners", "_responsiveListeners", "_sortedMetasets", "_plugins", "_hiddenIndices", "attached", "_animationsDisabled", "_doResize", "debounce", "mode", "resizeDelay", "_dataChanges", "animator", "listen", "_initialize", "maintainAspectRatio", "responsive", "retinaScale", "bindEvents", "clearCanvas", "stop", "running", "_resize", "_resizeBeforeDraw", "newSize", "newRatio", "onResize", "render", "ensureScalesHaveIDs", "scalesOptions", "axisOptions", "buildOrUpdateScales", "scaleOpts", "updated", "map", "isRadial", "dposition", "dtype", "scaleType", "scaleClass", "hasUpdated", "_updateMetasets", "numData", "numMeta", "_destroyDatasetMeta", "slice", "_removeUnreferencedMetasets", "_dataset", "buildOrUpdateControllers", "newControllers", "order", "visible", "isDatasetVisible", "updateIndex", "linkScales", "ControllerClass", "datasetElementType", "dataElementType", "_resetElements", "reset", "animsDisabled", "_updateScales", "_checkEventBindings", "_updateHiddenIndices", "buildOrUpdateElements", "getMaxOverflow", "_minPadding", "autoPadding", "_updateLayout", "_updateDatasets", "_eventHandler", "_updateHoverStyles", "existingEvents", "newEvents", "events", "setsEqual", "unbindEvents", "changes", "_getUniformDataChanges", "datasetCount", "makeSet", "changeSet", "noArea", "_idx", "_updateDataset", "_update", "layers", "_drawDatasets", "_getSortedDatasetMetas", "filterVisible", "_drawDataset", "_clip", "useClip", "disabled", "getElementsAtEventForMode", "Interaction", "hidden", "_parsed", "getVisibleDatasetCount", "setDatasetVisibility", "toggleDataVisibility", "getDataVisibility", "_updateVisibility", "dataIndex", "_resolveAnimations", "hide", "show", "_destroy", "_stop", "destroy", "toBase64Image", "toDataURL", "bindUserEvents", "bindResponsiveEvents", "listeners", "_add", "offsetX", "offsetY", "_remove", "detached", "updateHoverStyle", "prefix", "getActiveElements", "setActiveElements", "activeElements", "lastActive", "_elementsEqual", "isPluginEnabled", "pluginId", "replay", "hoverOptions", "hover", "deactivated", "activated", "eventFilter", "_handleEvent", "_getActiveElements", "_isClickEvent", "onHover", "onClick", "setStyle", "ctx", "options", "style", "lineCap", "valueOrDefault", "borderCapStyle", "setLineDash", "borderDash", "lineDashOffset", "borderDashOffset", "lineJoin", "borderJoinStyle", "lineWidth", "borderWidth", "strokeStyle", "borderColor", "lineTo", "previous", "target", "x", "y", "getLineMethod", "stepped", "_steppedLineTo", "tension", "cubicInterpolationMode", "_bezierCurveTo", "pathVars", "points", "segment", "params", "count", "length", "start", "paramsStart", "end", "paramsEnd", "segmentStart", "segmentEnd", "Math", "max", "min", "outside", "loop", "ilen", "pathSegment", "line", "lineMethod", "move", "reverse", "i", "point", "prev", "skip", "moveTo", "fastPathSegment", "avgX", "countX", "prevX", "minY", "maxY", "lastY", "pointIndex", "index", "drawX", "truncX", "_getSegmentMethod", "opts", "useFastPath", "_decimated", "_loop", "_getInterpolationMethod", "_steppedInterpolation", "_bezierInterpolation", "_pointInLine", "strokePathWithCache", "path", "_path", "Path2D", "closePath", "stroke", "strokePathDirect", "segments", "segmentMethod", "beginPath", "usePath2D", "draw", "LineElement", "Element", "id", "defaults", "capBezierPoints", "fill", "spanGaps", "defaultRoutes", "backgroundColor", "descriptors", "_scriptable", "_indexable", "name", "constructor", "cfg", "animated", "undefined", "_chart", "_fullLoop", "_points", "_segments", "_pointsUpdated", "_datasetIndex", "Object", "assign", "updateControlPoints", "chartArea", "indexAxis", "_updateBezierControlPoints", "_computeSegments", "first", "last", "interpolate", "property", "value", "_boundSegments", "result", "_interpolate", "p1", "p2", "push", "t", "abs", "interpolated", "save", "restore", "inRange", "el", "pos", "axis", "useFinalPosition", "getProps", "radius", "hitRadius", "PointElement", "parsed", "stop", "hoverBorderWidth", "hoverRadius", "pointStyle", "rotation", "mouseX", "mouseY", "pow", "inXRange", "inYRange", "getCenterPoint", "size", "area", "_isPointInArea", "fillStyle", "drawPoint", "getRange", "positioners", "average", "items", "length", "i", "len", "xSet", "Set", "y", "count", "el", "element", "hasValue", "pos", "tooltipPosition", "add", "x", "xAverage", "reduce", "a", "b", "size", "nearest", "eventPosition", "minDistance", "Number", "POSITIVE_INFINITY", "nearestElement", "center", "getCenterPoint", "d", "distanceBetweenPoints", "tp", "pushOrConcat", "base", "toPush", "isArray", "Array", "prototype", "push", "apply", "splitNewlines", "str", "String", "indexOf", "split", "createTooltipItem", "chart", "item", "datasetIndex", "index", "controller", "getDatasetMeta", "label", "value", "getLabelAndValue", "parsed", "getParsed", "raw", "data", "datasets", "formattedValue", "dataset", "getDataset", "dataIndex", "getTooltipSize", "tooltip", "options", "ctx", "body", "footer", "title", "boxWidth", "boxHeight", "bodyFont", "toFont", "titleFont", "footerFont", "titleLineCount", "footerLineCount", "bodyLineItemCount", "padding", "toPadding", "height", "width", "combinedBodyLength", "bodyItem", "before", "lines", "after", "beforeBody", "afterBody", "lineHeight", "titleSpacing", "titleMarginBottom", "bodyLineHeight", "displayColors", "Math", "max", "bodySpacing", "footerMarginTop", "footerSpacing", "widthPadding", "maxLineWidth", "line", "measureText", "save", "font", "string", "each", "concat", "boxPadding", "restore", "determineYAlign", "doesNotFitWithAlign", "xAlign", "caret", "caretSize", "caretPadding", "determineXAlign", "yAlign", "chartWidth", "chartArea", "left", "right", "determineAlignment", "alignX", "alignY", "paddingAndSize", "getBackgroundPoint", "alignment", "cornerRadius", "topLeft", "topRight", "bottomLeft", "bottomRight", "toTRBLCorners", "_limitValue", "getAlignedX", "align", "getBeforeAfterBodyLines", "callback", "createTooltipContext", "parent", "tooltipItems", "createContext", "type", "overrideCallbacks", "callbacks", "context", "override", "defaultCallbacks", "beforeTitle", "noop", "labels", "labelCount", "mode", "afterTitle", "beforeLabel", "tooltipItem", "isNullOrUndef", "labelColor", "meta", "getStyle", "borderColor", "backgroundColor", "borderWidth", "borderDash", "borderDashOffset", "borderRadius", "labelTextColor", "bodyColor", "labelPointStyle", "pointStyle", "rotation", "afterLabel", "beforeFooter", "afterFooter", "invokeCallbackWithFallback", "name", "arg", "result", "call", "Tooltip", "Element", "constructor", "config", "opacity", "_active", "_eventPosition", "undefined", "_size", "_cachedAnimations", "_tooltipItems", "$animations", "$context", "dataPoints", "caretX", "caretY", "labelColors", "labelPointStyles", "labelTextColors", "initialize", "_resolveAnimations", "cached", "setContext", "getContext", "opts", "enabled", "animation", "animations", "Animations", "_cacheable", "Object", "freeze", "getTitle", "getBeforeBody", "getBody", "bodyItems", "scoped", "getAfterBody", "getFooter", "_createItems", "active", "filter", "array", "itemSort", "sort", "update", "changed", "replay", "properties", "position", "positionAndSize", "assign", "backgroundPoint", "external", "drawCaret", "tooltipPoint", "caretPosition", "getCaretPosition", "lineTo", "x1", "y1", "x2", "y2", "x3", "y3", "ptX", "ptY", "drawTitle", "pt", "rtlHelper", "getRtlAdapter", "rtl", "titleAlign", "textAlign", "textBaseline", "fillStyle", "titleColor", "fillText", "_drawColorBox", "colorX", "rtlColorX", "yOffSet", "colorY", "usePointStyle", "drawOptions", "radius", "min", "centerX", "leftForLtr", "centerY", "strokeStyle", "multiKeyBackground", "drawPoint", "lineWidth", "isObject", "values", "setLineDash", "lineDashOffset", "outerX", "innerX", "xPlus", "some", "v", "beginPath", "addRoundedRectPath", "w", "h", "fill", "stroke", "fillRect", "strokeRect", "drawBody", "bodyAlign", "xLinePadding", "fillLineOfText", "bodyAlignForCalculation", "textColor", "j", "ilen", "jlen", "drawFooter", "footerAlign", "footerColor", "drawBackground", "tooltipSize", "moveTo", "quadraticCurveTo", "closePath", "_updateAnimationTarget", "anims", "animX", "animY", "point", "_to", "_willRender", "draw", "abs", "hasTooltipContent", "globalAlpha", "overrideTextDirection", "textDirection", "top", "restoreTextDirection", "getActiveElements", "setActiveElements", "activeElements", "lastActive", "map", "Error", "_elementsEqual", "positionChanged", "_positionChanged", "_ignoreReplayEvents", "handleEvent", "e", "inChartArea", "_getActiveElements", "getElementsAtEventForMode", "reverse", "id", "_element", "afterInit", "_args", "beforeUpdate", "reset", "afterDraw", "args", "notifyPlugins", "cancelable", "afterEvent", "useFinalPosition", "event", "defaults", "weight", "duration", "easing", "numbers", "defaultRoutes", "descriptors", "_scriptable", "_indexable", "_fallback", "additionalOptionScopes", "addIfString", "labels", "raw", "index", "addedLabels", "push", "unshift", "label", "isNaN", "findOrAddLabel", "first", "indexOf", "last", "lastIndexOf", "validIndex", "max", "_limitValue", "Math", "round", "_getLabelForValue", "value", "getLabels", "length", "CategoryScale", "Scale", "id", "defaults", "ticks", "callback", "constructor", "cfg", "_startValue", "undefined", "_valueRange", "_addedLabels", "init", "scaleOptions", "added", "splice", "parse", "isNullOrUndef", "isFinite", "valueOrDefault", "determineDataLimits", "minDefined", "maxDefined", "getUserBounds", "min", "getMinMax", "options", "bounds", "buildTicks", "offset", "slice", "getLabelForValue", "call", "configure", "isHorizontal", "_reversePixels", "getPixelForValue", "NaN", "getPixelForDecimal", "getPixelForTick", "getValueForPixel", "pixel", "getDecimalForPixel", "getBasePixel", "bottom", "generateTicks", "generationOptions", "dataRange", "MIN_SPACING", "step", "precision", "count", "maxTicks", "maxDigits", "includeBounds", "unit", "maxSpaces", "rmin", "rmax", "countDefined", "minSpacing", "spacing", "niceNum", "factor", "niceMin", "niceMax", "numSpaces", "ceil", "floor", "pow", "almostWhole", "almostEquals", "decimalPlaces", "_decimalPlaces", "j", "relativeLabelSize", "tickValue", "horizontal", "minRotation", "rad", "toRadians", "ratio", "sin", "cos", "LinearScaleBase", "start", "end", "_endValue", "Number", "handleTickRangeOptions", "beginAtZero", "setMin", "v", "setMax", "minSign", "sign", "maxSign", "abs", "getTickLimit", "tickOpts", "maxTicksLimit", "stepSize", "console", "warn", "computeTickLimit", "POSITIVE_INFINITY", "opts", "numericGeneratorOptions", "_maxDigits", "_range", "_setMinAndMaxByKey", "reverse", "formatNumber", "chart", "locale", "format", "LinearScale", "Ticks", "formatters", "numeric", "width", "height", "tickFont", "_resolveTickFontOptions", "lineHeight", "log10Floor", "log10", "changeExponent", "m", "isMajor", "tickVal", "remain", "steps", "rangeExp", "rangeStep", "startExp", "range", "finiteOrDefault", "minExp", "exp", "base", "significand", "major", "lastTick", "LogarithmicScale", "logarithmic", "enabled", "prototype", "apply", "_zero", "_suggestedMin", "_userMin", "_userMax", "decimal", "getTickBackdropHeight", "display", "padding", "toPadding", "backdropPadding", "font", "size", "measureLabelSize", "ctx", "isArray", "w", "_longestText", "string", "h", "determineLimits", "angle", "pos", "fitWithPointLabels", "scale", "orig", "l", "left", "_padding", "r", "right", "t", "top", "b", "limits", "Object", "assign", "labelSizes", "valueCount", "_pointLabels", "pointLabelOpts", "pointLabels", "additionalAngle", "centerPointLabels", "PI", "i", "setContext", "getPointLabelContext", "pointPosition", "getPointPosition", "drawingArea", "plFont", "toFont", "textSize", "angleRadians", "_normalizeAngle", "getIndexAngle", "toDegrees", "hLimits", "x", "vLimits", "y", "updateLimits", "setCenterPoint", "_pointLabelItems", "buildPointLabelItems", "createPointLabelItem", "itemOpts", "outerDistance", "extra", "pointLabelPosition", "HALF_PI", "yForAngle", "textAlign", "getTextAlignForAngle", "leftForTextAlign", "visible", "isNotOverlapped", "item", "area", "apexesInArea", "_isPointInArea", "items", "align", "drawPointLabelBox", "backdropColor", "borderRadius", "toTRBLCorners", "fillStyle", "backdropLeft", "backdropTop", "backdropWidth", "backdropHeight", "values", "some", "beginPath", "addRoundedRectPath", "radius", "fill", "fillRect", "drawPointLabels", "labelCount", "optsAtIndex", "renderText", "color", "textBaseline", "pathRadiusLine", "circular", "arc", "xCenter", "yCenter", "TAU", "moveTo", "lineTo", "drawRadiusLine", "gridLineOpts", "borderOpts", "lineWidth", "save", "strokeStyle", "setLineDash", "dash", "lineDashOffset", "dashOffset", "closePath", "stroke", "restore", "createPointLabelContext", "parent", "createContext", "type", "RadialLinearScale", "animate", "position", "angleLines", "borderDash", "borderDashOffset", "grid", "startAngle", "showLabelBackdrop", "defaultRoutes", "descriptors", "_fallback", "setDimensions", "maxWidth", "maxHeight", "generateTickLabels", "map", "callCallback", "filter", "getDataVisibility", "fit", "leftMovement", "rightMovement", "topMovement", "bottomMovement", "angleMultiplier", "getDistanceFromCenterForValue", "scalingFactor", "getValueForDistanceFromCenter", "distance", "scaledDistance", "pointLabel", "getContext", "distanceFromCenter", "getPointPositionForValue", "getBasePosition", "getBaseValue", "getPointLabelPosition", "drawBackground", "backgroundColor", "drawGrid", "border", "forEach", "tick", "context", "optsAtIndexBorder", "drawBorder", "drawLabels", "translate", "rotate", "measureText", "strokeColor", "textStrokeColor", "strokeWidth", "textStrokeWidth", "drawTitle", "INTERVALS", "millisecond", "common", "second", "minute", "hour", "day", "week", "month", "quarter", "year", "UNITS", "keys", "sorter", "a", "input", "adapter", "_adapter", "parser", "isoWeekday", "_parseOpts", "isNumber", "startOf", "determineUnitForAutoTicks", "minUnit", "capacity", "ilen", "interval", "MAX_SAFE_INTEGER", "determineUnitForFormatting", "numTicks", "diff", "determineMajorUnit", "addTick", "time", "timestamps", "lo", "hi", "_lookup", "timestamp", "setMajorTicks", "majorUnit", "add", "ticksFromTimestamps", "TimeScale", "adapters", "displayFormats", "source", "props", "_cache", "data", "all", "_unit", "_majorUnit", "_offsets", "_normalized", "scaleOpts", "_date", "date", "mergeIf", "formats", "normalized", "beforeLayout", "_applyBounds", "_getLabelBounds", "Date", "now", "endOf", "arr", "getLabelTimestamps", "NEGATIVE_INFINITY", "timeOpts", "_generate", "_filterBetween", "autoSkip", "_getLabelCapacity", "initOffsets", "afterAutoSkip", "offsetAfterAutoskip", "getDecimalForValue", "limit", "minor", "weekday", "hasWeekday", "Error", "getDataTimestamps", "sort", "tooltipFormat", "datetime", "fmt", "_tickFormatFunction", "formatter", "minorFormat", "majorFormat", "offsets", "_getLabelSize", "ticksOpts", "tickLabelWidth", "maxRotation", "cosRotation", "sinRotation", "tickFontSize", "exampleTime", "exampleLabel", "metas", "getMatchingVisibleMetas", "controller", "getAllParsedValues", "concat", "normalize", "_arrayUnique", "interpolate", "table", "val", "prevSource", "nextSource", "prevTarget", "nextTarget", "_lookupByKey", "span", "TimeSeriesScale", "_table", "_minPos", "_tableRange", "_getTimestampsForTable", "buildLookupTable", "prev", "curr", "next", "includes"]
}
